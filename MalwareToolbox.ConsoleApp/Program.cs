using System.Reflection;
using CommandLine;
using MalwareToolbox.ConsoleApp;
using MalwareToolbox.LibraryC.Executables;
using MalwareToolbox.LibraryC.Hashing;
using MalwareToolbox.LibraryC.Unpackers;
using MalwareToolbox.LibraryC.Dynamic;

// var packerDb = new PackerDatabase(@"C:\Users\wben1\Downloads\userdb.txt");
//
// if (!packerDb.Load())
// {
//     Console.WriteLine("Failed to load packer database");
// }
//
// foreach (var packer in packerDb.GetSignatures())
// {
//     Console.WriteLine(packer.SignatureValues);
// }
//
// packerDb.GetSignatures()[0].SignatureValues.ToList().ForEach(x => Console.WriteLine("{0:X}", x));

var regshot = new RegShot();
RegistryKey snapshot_1 = regshot.TakeSnapshot();

string empty = Console.ReadLine();

RegistryKey snapshot_2 = regshot.TakeSnapshot();

regshot.CompareSnapshot(snapshot_1, snapshot_2);

// var data = key.SubKeys["test"];
// foreach (var value in data.Values.Values)
// {
//     Console.WriteLine(value.Name);
//     Console.WriteLine(value.Data);
//     Console.WriteLine("");
// }    

Parser.Default.ParseArguments<Commands.Version, Commands.GetByte, Commands.Hash>(args)
    .WithParsed<Commands.Version>(VersionRun)
    .WithParsed<Commands.GetByte>(GetByteRun)
    .WithParsed<Commands.Hash>(HashRun);

void VersionRun(Commands.Version opts)
{
    var informationalVersion = Assembly.GetEntryAssembly().GetCustomAttribute<AssemblyInformationalVersionAttribute>()?.InformationalVersion;
    Console.WriteLine(informationalVersion);
}

void GetByteRun(Commands.GetByte opts)
{
    var pe = new PE(opts.File);
    if (!pe.Load())
    {
        Console.WriteLine("Failed to load file");
        return;
    }
    Console.WriteLine("Hex: {0:X}", pe.GetByte(opts.Offset));
}

void HashRun(Commands.Hash opts)
{
    var pe = new PE(opts.File);
    if (!pe.Load())
    {
        Console.WriteLine("Failed to load file");
        return;
    }

    IHasher hasher;
    switch (opts.Type)
    {
        case "sha256":
            hasher = new Sha256Hasher(pe);
            break;
        case "md5":
            hasher = new Md5Hasher(pe);
            break;
        default:
            Console.WriteLine("Unknown hash type");
            return;
    }
    
    Console.WriteLine(Convert.ToHexString(hasher.Hash()));
}
