using MalwareToolbox.Library.VirusTotalAPI;
using MalwareToolbox.LibraryC.Executables;
using MalwareToolbox.LibraryC.Hashing;
using MalwareToolbox.LibraryC.Unpackers;
using MalwareToolbox.LibraryC.RegShot;
using MalwareToolbox.LibraryC.Strings;
using static MalwareToolbox.ConsoleApp.BConsole.BConsole;
using static MalwareToolbox.ConsoleApp.Commands;
using static MalwareToolbox.ConsoleApp.PrettyPrint;

namespace MalwareToolbox.ConsoleApp;

public class Runners
{
    static void HashRun(Hash opts)
    {
        var pe = new PE(opts.File);
        if (!pe.Load())
        {
            Console.WriteLine("Failed to load file");
            return;
        }

        IHasher hasher;
        switch (opts.Type)
        {
            case "sha256":
                hasher = new Sha256Hasher(pe);
                break;
            case "md5":
                hasher = new Md5Hasher(pe);
                break;
            default:
                Console.WriteLine("Unknown hash type");
                return;
        }

        Console.WriteLine(Convert.ToHexString(hasher.Hash()));
    }

    static void PeInfoRun(Commands.PeInfo opts)
    {
        var pe = new PE(opts.File);
        if (!pe.Load())
        {
            Console.WriteLine("Failed to load file");
            return;
        }

        PrintPe(pe);
    }

    static void PeidRun(Peid opts)
    {
        var packerDb = new PackerDatabase(opts.Database);
        if (!packerDb.Load())
        {
            Console.WriteLine("Failed to load packer database");
        }

        var pe = new PE(opts.File);
        if (!pe.Load())
        {
            Console.WriteLine("Failed to load file");
            return;
        }

        PrintPe(pe);

        List<Signature> signatures = packerDb.ScanPE(pe, ScanMode.EpOnly);
        foreach (var signature in signatures)
        {
            Console.WriteLine(signature.Tool);
        }
    }

    static void RegshotRun(Regshot opts)
    {
        var regshot = new RegShot();

        Console.WriteLine("Taking Snapshot 1...");
        RegistryKey snapshot_1 = regshot.TakeSnapshot();
        Console.WriteLine("Snapshot 1 taken");
        Console.WriteLine("");

        Console.WriteLine("Press any key to take snapshot 2...");
        Console.Read();

        Console.WriteLine("Taking Snapshot 2...");
        RegistryKey snapshot_2 = regshot.TakeSnapshot();
        Console.WriteLine("Snapshot 2 taken");
        Console.WriteLine("");

        var keysDiff = regshot.CompareSnapshots(snapshot_1, snapshot_2);

        Console.WriteLine("-------- Differences --------");

        foreach (var diff in keysDiff)
        {
            switch (diff.Type)
            {
                case DiffType.Added:
                    FgBlack(BgDarkGreen($" + [{diff.Key.FullPath}]", LF())).WriteLine();
                    break;
                case DiffType.Deleted:
                    BgDarkRed($" - [{diff.Key.FullPath}]", LF()).WriteLine();
                    break;
                case DiffType.Modified:
                    FgBlack(BgDarkYellow($" ~ [{diff.Key.FullPath}]")).WriteLine();
                    diff.ValuesDiff.ForEach(valueDiff =>
                     {
                         switch (valueDiff.Type)
                         {
                             case DiffType.Added:
                                 FgBlack(BgDarkGreen($" + [{valueDiff.New}]", LF())).WriteLine();
                                 break;
                             case DiffType.Deleted:
                                 BgDarkRed($" - [{valueDiff.Old}]", LF()).WriteLine();
                                 break;
                             case DiffType.Modified:
                                 FgBlack(
                                     "    ", 
                                     BgYellow(
                                         $" ~ {valueDiff.Old.Name}: ", 
                                         BgRed(valueDiff.Old), 
                                         " -> ", 
                                         BgGreen(valueDiff.New), 
                                         " ")
                                     ).WriteLine();
                                 break;
                         }
                     });
                    break;
            }
        }
    }

    static void StringsRun(Strings opts)
    {
        var file = new MalwareToolbox.LibraryC.Utils.File(opts.File);
        if (!file.Load())
        {
            Console.WriteLine("Failed to load file");
            return;
        }

        StringAnalyser strings = new StringAnalyser(file);
        List<String> result = strings.GenerateStrings(opts.Min, opts.Max);

        StringCategoriser categoriser = new StringCategoriser();
        var catergoriseStrings = categoriser.CatergoriseStrings(result);

        foreach (var catergoriseString in catergoriseStrings)
        {
            Console.WriteLine("{0} : {1}", catergoriseString.Item2, catergoriseString.Item1);
        }
    }

    static void VirusTotalRun(VirusTotal opts)
    {
        var virusTotal = new VirusTotalAPI();
        Result? result = virusTotal.GetDetails(opts.ApiKey, opts.Hash);
        if (result == null)
        {
            Console.WriteLine("Failed to get details");
            return;
        }

        PrintVirusTotal(result);
    }
}
