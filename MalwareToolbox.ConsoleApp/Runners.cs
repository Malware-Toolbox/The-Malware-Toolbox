using MalwareToolbox.Library.VirusTotalAPI;
using MalwareToolbox.Library.DNSReqCapture;
using MalwareToolbox.LibraryC.Executables;
using MalwareToolbox.LibraryC.Hashing;
using MalwareToolbox.LibraryC.Unpackers;
using MalwareToolbox.LibraryC.RegShot;
using MalwareToolbox.LibraryC.Strings;
using MalwareToolbox.LibraryC.Utils;
using MalwareToolbox.LibraryC.ProcessAnalysis;
using static MalwareToolbox.ConsoleApp.Commands;
using static MalwareToolbox.ConsoleApp.PrettyPrint;

namespace MalwareToolbox.ConsoleApp;

public class Runners
{
    static void HashRun(Hash opts)
    {
        var file = new WinFile(opts.File);
        if (!file.Load())
        {
            Console.WriteLine("Failed to load file");
            return;
        }

        IHasher hasher = opts.Type switch
        {
            "sha256" => new Sha256Hasher(file),
            "md5" => new Md5Hasher(file),
            _ => throw new Exception($"Invalid hash type: {opts.Type}"),
        };

        Console.WriteLine(Convert.ToHexString(hasher.Hash()));
    }

    static void PeInfoRun(Commands.PeInfo opts)
    {
        var file = new WinFile(opts.File);
        if (!file.Load())
        {
            Console.WriteLine("Failed to load file");
            return;
        }
        
        var pe = new PE(file);
        if (!pe.LoadHeaders())
        {
            Console.WriteLine("Failed to load PE");
            return;
        }

        PrintPe(pe);
    }

    static void PeidRun(Peid opts)
    {
        var packerDb = new PackerDatabase(opts.Database);
        if (!packerDb.Load())
        {
            Console.WriteLine("Failed to load packer database");
        }

        var file = new WinFile(opts.File);
        if (!file.Load())
        {
            Console.WriteLine("Failed to load file");
            return;
        }
        
        var pe = new PE(file);
        if (!pe.LoadHeaders())
        {
            Console.WriteLine("Failed to load PE");
            return;
        }

        List<Signature> signatures = packerDb.ScanPE(pe, ScanMode.EpOnly);
        foreach (var signature in signatures)
        {
            Console.WriteLine(signature.Tool);
        }
    }

    static void RegshotRun(Regshot opts)
    {
        var regshot = new RegShot();

        Console.WriteLine("Taking Snapshot 1...");
        RegistrySnapshot snapshot1 = regshot.TakeSnapshot(RegistryHiveType.HkeyCurrentUser);
        Console.WriteLine("Snapshot 1 taken");
        Console.WriteLine("");

        Console.WriteLine("Press any key to take snapshot 2...");
        Console.Read();

        Console.WriteLine("Taking Snapshot 2...");
        RegistrySnapshot snapshot2 = regshot.TakeSnapshot(RegistryHiveType.HkeyCurrentUser);
        Console.WriteLine("Snapshot 2 taken");
        Console.WriteLine("");

        var keysDiff = regshot.CompareSnapshots(snapshot1, snapshot2);

        PrintRegDiff(keysDiff);
    }

    static void StringsRun(Strings opts)
    {
        var file = new WinFile(opts.File);
        if (!file.Load())
        {
            Console.WriteLine("Failed to load file");
            return;
        }

        StringAnalyser strings = new StringAnalyser(file);
        var categoriseStrings = strings.GetStrings(new StringFilter(opts.Min, opts.Max, opts.Search, StringsMatchingMode.Contains, true, null, null));

        foreach (var categoryName in categoriseStrings.Keys)
        {
            Console.WriteLine(categoryName);
            foreach (var stringValue in categoriseStrings[categoryName])
            {
                Console.WriteLine($"    {stringValue}");
            }
        }
    }

    static void VirusTotalRun(VirusTotal opts)
    {
        var virusTotal = new VirusTotalAPI();
        Result? result = virusTotal.GetDetails(opts.ApiKey, opts.Hash);
        if (result == null)
        {
            Console.WriteLine("Failed to get details");
            return;
        }

        PrintVirusTotal(result);
    }

    static void DNSReqCaptureRun(DNSReqCapture opts)
    {
        // Make sure we revert dns if we force quit
        // Or not we will nuke our com's internet

        Console.CancelKeyPress += (sender, eventArgs) => {
            SetDNS.UnsetDNS();
        };

        SetDNS.SettingDNS("127.0.0.1");

        Console.WriteLine("Server Created");
        Server server = new Server();
        server.start();
        Console.WriteLine("Udp Listener started");

        try
        {
            while (true)
            {
                List<string> nameList = server.recv();
                Console.WriteLine(String.Join(".", nameList));

                Thread.Sleep(1000);
            }
        }

        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            SetDNS.UnsetDNS();
        }

        SetDNS.UnsetDNS();
    }
    static void ProcessAnalysisRun() 
    {
        Process p;
        p.main();
    }
}
