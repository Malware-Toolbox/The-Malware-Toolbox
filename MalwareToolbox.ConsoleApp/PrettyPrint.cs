using MalwareToolbox.Library.VirusTotalAPI;
using MalwareToolbox.LibraryC.Executables;

namespace MalwareToolbox.ConsoleApp;

public class PrettyPrint
{

    public static void PrintPe(PE pe)
    {
        Console.WriteLine("----File Properties----");
        Console.WriteLine("Path: {0}", pe.File.Path);
        Console.WriteLine("Size: {0}", pe.File.Size);
        Console.WriteLine("Is DLL: {0}", pe.IsDLL());
        Console.WriteLine("Is 64 bit: {0}", pe.Is64Bit());
        Console.WriteLine("");
        Console.WriteLine("----DOS Headers----");
        Console.WriteLine("Magic: {0:X}", pe.DosHeaders.Magic);
        Console.WriteLine("Lfanew: {0:X}", pe.DosHeaders.Lfanew);
        Console.WriteLine("");
        Console.WriteLine("----NT File Headers----");
        Console.WriteLine("Signature: {0:X}", pe.NtFileHeaders.Signature);
        Console.WriteLine("Machine: {0:X}", pe.NtFileHeaders.Machine);
        Console.WriteLine("NumberOfSections: {0:D}", pe.NtFileHeaders.NumberOfSections);
        Console.WriteLine("TimeDateStamp: {0:X}", pe.NtFileHeaders.TimeDateStamp);
        Console.WriteLine("PointerToSymbolTable: {0:X}", pe.NtFileHeaders.PointerToSymbolTable);
        Console.WriteLine("NumberOfSymbols: {0:D}", pe.NtFileHeaders.NumberOfSymbols);
        Console.WriteLine("SizeOfOptionalHeader: {0:D}", pe.NtFileHeaders.SizeOfOptionalHeader);
        Console.WriteLine("Characteristics: {0:X}", pe.NtFileHeaders.Characteristics);
        Console.WriteLine("----NT Optional Headers----");
        Console.WriteLine("Magic: {0:X}", pe.NtOptionalHeaders.Magic);
        Console.WriteLine("MajorLinkerVersion: {0:D}", pe.NtOptionalHeaders.MajorLinkerVersion);
        Console.WriteLine("MinorLinkerVersion: {0:D}", pe.NtOptionalHeaders.MinorLinkerVersion);
        Console.WriteLine("SizeOfCode: {0:D}", pe.NtOptionalHeaders.SizeOfCode);
        Console.WriteLine("SizeOfInitializedData: {0:D}", pe.NtOptionalHeaders.SizeOfInitializedData);
        Console.WriteLine("SizeOfUninitializedData: {0:D}", pe.NtOptionalHeaders.SizeOfUninitializedData);
        Console.WriteLine("AddressOfEntryPoint: {0:X}", pe.NtOptionalHeaders.AddressOfEntryPoint);
        Console.WriteLine("BaseOfCode: {0:X}", pe.NtOptionalHeaders.BaseOfCode);
        Console.WriteLine("SectionAlignment: {0:D}", pe.NtOptionalHeaders.SectionAlignment);
        Console.WriteLine("FileAlignment: {0:D}", pe.NtOptionalHeaders.FileAlignment);
        Console.WriteLine("MajorOperatingSystemVersion: {0:D}", pe.NtOptionalHeaders.MajorOperatingSystemVersion);
        Console.WriteLine("MinorOperatingSystemVersion: {0:D}", pe.NtOptionalHeaders.MinorOperatingSystemVersion);
        Console.WriteLine("MajorImageVersion: {0:D}", pe.NtOptionalHeaders.MajorImageVersion);
        Console.WriteLine("MinorImageVersion: {0:D}", pe.NtOptionalHeaders.MinorImageVersion);
        Console.WriteLine("MajorSubsystemVersion: {0:D}", pe.NtOptionalHeaders.MajorSubsystemVersion);
        Console.WriteLine("MinorSubsystemVersion: {0:D}", pe.NtOptionalHeaders.MinorSubsystemVersion);
        Console.WriteLine("Win32VersionValue: {0:X}", pe.NtOptionalHeaders.Win32VersionValue);
        Console.WriteLine("SizeOfImage: {0:D}", pe.NtOptionalHeaders.SizeOfImage);
        Console.WriteLine("SizeOfHeaders: {0:D}", pe.NtOptionalHeaders.SizeOfHeaders);
        Console.WriteLine("CheckSum: {0:X}", pe.NtOptionalHeaders.CheckSum);
        Console.WriteLine("Subsystem: {0:D}", pe.NtOptionalHeaders.Subsystem);
        Console.WriteLine("DllCharacteristics: {0:D}", pe.NtOptionalHeaders.DllCharacteristics);
        Console.WriteLine("LoaderFlags: {0:X}", pe.NtOptionalHeaders.LoaderFlags);
        Console.WriteLine("NumberOfRvaAndSizes: {0:D}", pe.NtOptionalHeaders.NumberOfRvaAndSizes);
        Console.WriteLine("");
        if (pe.Is64Bit())
        {
            NtOptionalHeader64 ntOptionalHeaders = (pe.NtOptionalHeaders as NtOptionalHeader64)!;
            Console.WriteLine("ImageBase: {0:X}", ntOptionalHeaders.ImageBase);
            Console.WriteLine("SizeOfStackReserve: {0:X}", ntOptionalHeaders.SizeOfStackReserve);
            Console.WriteLine("SizeOfStackCommit: {0:X}", ntOptionalHeaders.SizeOfStackCommit);
            Console.WriteLine("SizeOfHeapReserve: {0:X}", ntOptionalHeaders.SizeOfHeapReserve);
            Console.WriteLine("SizeOfHeapCommit: {0:X}", ntOptionalHeaders.SizeOfHeapCommit);
        }
        else
        {
            NtOptionalHeader32 ntOptionalHeaders = (pe.NtOptionalHeaders as NtOptionalHeader32)!;
            Console.WriteLine("BaseOfData: {0:X}", ntOptionalHeaders.BaseOfData);
            Console.WriteLine("ImageBase: {0:X}", ntOptionalHeaders.ImageBase);
            Console.WriteLine("SizeOfStackReserve: {0:X}", ntOptionalHeaders.SizeOfStackReserve);
            Console.WriteLine("SizeOfStackCommit: {0:X}", ntOptionalHeaders.SizeOfStackCommit);
            Console.WriteLine("SizeOfHeapReserve: {0:X}", ntOptionalHeaders.SizeOfHeapReserve);
            Console.WriteLine("SizeOfHeapCommit: {0:X}", ntOptionalHeaders.SizeOfHeapCommit);
        }
        Console.WriteLine("");
        foreach (var section in pe.SectionHeaders)
        {
            Console.WriteLine("----Section Header----");
            Console.WriteLine("Name: {0}", section.Name);
            Console.WriteLine("VirtualSize: {0:D}", section.VirtualSize);
            Console.WriteLine("VirtualAddress: {0:X}", section.VirtualAddress);
            Console.WriteLine("SizeOfRawData: {0:D}", section.SizeOfRawData);
            Console.WriteLine("PointerToRawData: {0:X}", section.PointerToRawData);
            Console.WriteLine("");
        }
    }

    public static void PrintVirusTotal(Result result)
    {
        Console.WriteLine("\n--------------------------------Details--------------------------------");
        Console.WriteLine("MD5: {0}", result.data.attributes.md5);
        Console.WriteLine("SHA-1: {0}", result.data.attributes.sha1);
        Console.WriteLine("SHA-256: {0}", result.data.attributes.sha256);
        Console.WriteLine("Vhash: {0}", result.data.attributes.vhash);
        Console.WriteLine("Authentihash: {0}", result.data.attributes.authentihash);
        Console.WriteLine();
        Console.WriteLine("File Type: {0}", result.data.attributes.type_description);
        Console.WriteLine("Magic: {0}", result.data.attributes.magic);
        Console.WriteLine("Creation Date: {0}", result.data.attributes.creation_date);
        Console.WriteLine("Last Modified: {0}", result.data.attributes.last_modification_date);
        Console.WriteLine("File Size (bytes): {0}", result.data.attributes.size);
        Console.WriteLine("-------------------------------------------------------------------------");

        Console.WriteLine("\n--------------------------------Names--------------------------------");
        foreach (var function in result.data.attributes.names)
        {
            Console.WriteLine(function);
        }
        Console.WriteLine("-----------------------------------------------------------------------");

        Console.WriteLine("\n--------------------------------Sections--------------------------------");
        foreach (var section in result.data.attributes.pe_info.sections)
        {
            Console.WriteLine();
            Console.WriteLine("Name: {0}", section.name);
            Console.WriteLine("Flags: {0}", section.flags);
            Console.WriteLine("Virtual Address: {0}", section.virtual_address);
            Console.WriteLine("Virtual Size: {0}", section.virtual_size);
            Console.WriteLine("Raw Size: {0}", section.raw_size);
            Console.WriteLine("Entropy: {0}", section.entropy);
            Console.WriteLine("MD5: {0}", section.md5);
            Console.WriteLine("Chi2: {0}", section.chi2);
            Console.WriteLine();
        }
        Console.WriteLine("----------------------------------------------------------------------");

        Console.WriteLine("\n--------------------------------Imports--------------------------------");
        foreach (var imports in result.data.attributes.pe_info.import_list)
        {
            Console.WriteLine();
            Console.WriteLine("Library Name: {0}", imports.library_name);
            Console.WriteLine();
            Console.WriteLine("Functions:");
            foreach (var function in imports.imported_functions)
            {
                Console.WriteLine(function);
            }
            Console.WriteLine();
        }
        Console.WriteLine("--------------------------------------------------------------------------");
    }
}
