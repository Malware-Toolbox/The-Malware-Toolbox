using System.Text;
using System.Text.RegularExpressions;
using MalwareToolbox.Library.Utils;
using MalwareToolbox.LibraryC.RegShot;

namespace MalwareToolbox.Library.ImportExports.RegShot;

public class RegistryHandler : IImportExportHandler<RegistrySnapshot>
{
    private static readonly Regex ValueNameQuotes = new(@"""[^""\\]*(?:\\.[^""\\]*)*""");

    public string FileType => ".reg";
    
    public async Task<RegistrySnapshot?> Import(string path, StreamReader stream)
    {
        await stream.ReadLineAsync(); // Skip header
        
        var snapshot = new RegistrySnapshot(Path.GetFileNameWithoutExtension(path))
        {
            CaptureTime = File.GetLastWriteTime(path)
        };

        RegistryKey? selectedKey = null;
        
        while (!stream.EndOfStream)
        {
            var line = await stream.ReadLineAsync();

            // Empty line
            if (String.IsNullOrWhiteSpace(line)) continue;

            // Comment
            if (line.StartsWith(";")) continue;

            // Key
            if (line.StartsWith("["))
            {
                var keys = line.Substring(1, line.Length - 2).Split('\\');

                if (snapshot.HiveType == null)
                {
                    snapshot.HiveType = RegistryHiveType.FromString(keys[0]);
                    snapshot.Key = new RegistryKey()
                    {
                        Name = snapshot.HiveType.Name,
                        FullPath = snapshot.HiveType.Name,
                        SubKeys = new Dictionary<string, RegistryKey>(),
                        Values = new Dictionary<string, RegistryValue>()
                    };
                }

                var currentKey = snapshot.Key;
                foreach (var key in keys.Skip(1))
                {
                    if (currentKey.SubKeys.TryGetValue(key, out var subKey))
                    {
                        currentKey = subKey;
                        continue;
                    }

                    var newKey = new RegistryKey
                    {
                        ParentKey = currentKey,
                        Name = key,
                        FullPath = $"{currentKey.FullPath}\\{key}",
                        SubKeys = new Dictionary<string, RegistryKey>(),
                        Values = new Dictionary<string, RegistryValue>()
                    };
                    currentKey.SubKeys.TryAdd(key, newKey);
                    currentKey = newKey;
                }

                selectedKey = currentKey;

                continue;
            }

            // Value
            string name = "";
            string rawData = "";
            
            if (line[0] == '@')
            {
                rawData = line.Substring(2);
            }
            else
            {
                var valueMatch = ValueNameQuotes.Match(line);
                if (valueMatch.Success)
                {
                    name = Regex.Unescape(line.Substring(1, valueMatch.Length - 2));
                    rawData = line.Substring(valueMatch.Length + 1);
                }
            }
            
            if (!String.IsNullOrEmpty(rawData))
            {
                var value = new RegistryValue
                {
                    Key = selectedKey,
                    Name = name,
                };              
                
                if (rawData.StartsWith('"'))
                {
                    value.Type = 1;
                    value.Data = Regex.Unescape(rawData.Substring(1, rawData.Length - 2)) + '\0';
                }
                else
                {
                    var split = rawData.Split(':', 2);
                    var dataType = split[0];
                    var dataValue = split[1];

                    if (dataType.Equals("dword"))
                    {
                        value.Type = 4;
                        value.Data = Convert.ToUInt32(dataValue, 16);
                    }
                    else if (dataType.StartsWith("hex"))
                    {
                        value.Type = dataType.Length > 4 ? Convert.ToUInt32(dataType[4].ToString(), 16) : 3;

                        byte[] byteData;
                        if (!String.IsNullOrEmpty(dataValue))
                        {
                            var fullData = dataValue;
                            while (fullData.EndsWith('\\'))
                            {
                                var dataLine = await stream.ReadLineAsync();
                                fullData = fullData.Substring(0, fullData.Length - 1) + dataLine.TrimStart();
                            }

                            byteData = fullData.Split(',')
                                .Select(v => Convert.ToByte(v, 16))
                                .ToArray();
                        }
                        else
                        {
                            byteData = Array.Empty<byte>();
                        }

                        unsafe
                        {
                            fixed (byte* p = byteData)
                            {
                                value.ParseData(value.Type, p, (uint)byteData.Length);
                            }
                        }
                    }
                }

                selectedKey?.Values.TryAdd(value.Name, value);

                continue;
            }
        }

        Console.WriteLine(snapshot);
        return snapshot;
    }

    public async Task<bool> Export(string path, StreamWriter stream, RegistrySnapshot data)
    {
        await stream.WriteLineAsync("Windows Registry Editor Version 5.00");
        await stream.WriteLineAsync();

        await _RecursivelyExport(stream, data.Key);

        return true;
    }

    private async Task _RecursivelyExport(StreamWriter stream, RegistryKey key)
    {
        await stream.WriteLineAsync($"[{key.FullPath}]");
        
        foreach (var value in key.Values.Values)
        {
            var name = string.IsNullOrEmpty(value.Name) ? "@" : ToLiteral(value.Name);
            var data = "";

            byte[]? bytes = null;
            switch (value.Type)
            {
                case 1: // REG_SZ
                    data = ToLiteral(value.Data as string ?? string.Empty);
                    break;
                case 2: // REG_EXPAND_SZ
                case 6: // REG_LINK
                    bytes = Encoding.Unicode.GetBytes(value.Data as string ?? string.Empty);
                    break;
                case 4: // REG_DWORD
                    data = $"dword:{(value.Data as uint? ?? 0):X8}";
                    break;
                case 5:
                    bytes = BitConverter.GetBytes(value.Data as uint? ?? 0).Reverse().ToArray();
                    break;
                case 7:
                    var multistring = string.Join('\0', value.Data as string[] ?? Array.Empty<string>()) + "\0\0";
                    bytes = Encoding.Unicode.GetBytes(multistring);
                    break;
                case 11:
                    bytes = BitConverter.GetBytes(value.Data as ulong? ?? 0);
                    break;
                default:
                    bytes = value.Data as byte[] ?? Array.Empty<byte>();
                    break;
            }

            if (bytes != null)
            {
                data = $"hex({value.Type:X1}):{HexConverter.ByteArrayToString(bytes)}";
            }

            await stream.WriteLineAsync($"{name}={data}");
        }
        
        await stream.WriteLineAsync();

        foreach (var subKey in key.SubKeys.Values)
        {
            await _RecursivelyExport(stream, subKey);
        }
    }

    private static string ToLiteral(string value, bool quotes = true)
    {
        return Microsoft.CodeAnalysis.CSharp.SymbolDisplay.FormatLiteral(value, quotes);
    }    
}
