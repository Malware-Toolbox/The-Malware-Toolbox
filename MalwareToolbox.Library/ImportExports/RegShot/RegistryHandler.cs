using System.Text.RegularExpressions;
using MalwareToolbox.LibraryC.RegShot;

namespace MalwareToolbox.Library.ImportExports.RegShot;

public class RegistryHandler : IImportExportHandler<RegistrySnapshot>
{
    private static readonly Regex ValueNameQuotes = new(@"""[^""\\]*(?:\\.[^""\\]*)*""");

    public string FileType => ".reg";
    
    public async Task<RegistrySnapshot?> Import(string path, StreamReader stream)
    {
        await stream.ReadLineAsync(); // Skip header
        
        var snapshot = new RegistrySnapshot(Path.GetFileNameWithoutExtension(path))
        {
            CaptureTime = File.GetCreationTime(path)
        };

        RegistryKey selectedKey = null;
        
        while (!stream.EndOfStream)
        {
            var line = await stream.ReadLineAsync();

            // Empty line
            if (String.IsNullOrWhiteSpace(line)) continue;

            // Comment
            if (line.StartsWith(";")) continue;

            // Key
            if (line.StartsWith("["))
            {
                var keys = line.Substring(1, line.Length - 2).Split('\\');

                if (snapshot.HiveType == null)
                {
                    snapshot.HiveType = RegistryHiveType.FromString(keys[0]);
                    snapshot.Key = new RegistryKey()
                    {
                        Name = snapshot.HiveType.Name,
                        FullPath = snapshot.HiveType.Name,
                        SubKeys = new Dictionary<string, RegistryKey>(),
                        Values = new Dictionary<string, RegistryValue>()
                    };
                }

                var currentKey = snapshot.Key;
                foreach (var key in keys.Skip(1))
                {
                    if (currentKey.SubKeys.TryGetValue(key, out var subKey))
                    {
                        currentKey = subKey;
                        continue;
                    }

                    var newKey = new RegistryKey
                    {
                        ParentKey = currentKey,
                        Name = key,
                        FullPath = $"{currentKey.FullPath}\\{key}",
                        SubKeys = new Dictionary<string, RegistryKey>(),
                        Values = new Dictionary<string, RegistryValue>()
                    };
                    currentKey.SubKeys.TryAdd(key, newKey);
                    currentKey = newKey;
                }

                selectedKey = currentKey;

                continue;
            }

            // Value
            string name = "";
            string rawData = "";
            
            if (line[0] == '@')
            {
                rawData = line.Substring(2);
            }
            else
            {
                var valueMatch = ValueNameQuotes.Match(line);
                if (valueMatch.Success)
                {
                    name = line.Substring(1, valueMatch.Length - 2);
                    rawData = line.Substring(valueMatch.Length + 1);
                }
            }
            
            if (!String.IsNullOrEmpty(rawData))
            {
                var value = new RegistryValue
                {
                    Key = selectedKey,
                    Name = name,
                };              
                
                if (rawData.StartsWith('"'))
                {
                    value.Type = 1;
                    value.Data = rawData.Substring(1, rawData.Length - 2);
                }
                else
                {
                    var split = rawData.Split(':', 2);
                    var dataType = split[0];
                    var dataValue = split[1];

                    if (dataType.Equals("dword"))
                    {
                        value.Type = 4;
                        value.Data = Convert.ToUInt32(dataValue, 16);
                    }
                    else if (dataType.StartsWith("hex"))
                    {
                        value.Type = dataType.Length > 4 ? Convert.ToUInt32(dataType[4].ToString(), 16) : 3;

                        if (!String.IsNullOrEmpty(dataValue))
                        {
                            var fullData = dataValue;
                            while (fullData.EndsWith('\\'))
                            {
                                var dataLine = await stream.ReadLineAsync();
                                fullData = fullData.Substring(0, fullData.Length - 1) + dataLine.TrimStart();
                            }

                            var byteData = fullData.Split(',')
                                .Select(v => Convert.ToByte(v, 16))
                                .ToArray();

                            unsafe
                            {
                                fixed (byte* p = byteData)
                                {
                                    value.ParseData(value.Type, p, (uint)byteData.Length);
                                }
                            }
                        }
                        else
                        {
                            value.Data = Array.Empty<byte>();
                        }
                    }
                }

                selectedKey?.Values.TryAdd(value.Name, value);

                continue;
            }
        }

        Console.WriteLine(snapshot);
        return snapshot;
    }

    public Task<bool> Export(string path, StreamWriter stream, RegistrySnapshot data)
    {
        throw new NotImplementedException();
    }
}
