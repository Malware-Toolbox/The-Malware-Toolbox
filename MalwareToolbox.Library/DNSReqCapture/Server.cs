using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System;
using System.Collections.Generic;
using System.Net.Sockets;
using System.Net;
using System.Xml;
using System.IO;

namespace MalwareToolbox.Library.DNSReqCapture
{
    public class Server
    {
        IPEndPoint ep;
        UdpClient listener;
        List<IPEndPoint> clients = new List<IPEndPoint>();

        public void start()
        {
            ep = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 53);
            listener = new UdpClient(ep);
        }

        public List<string> recv()
        {
            IPEndPoint? currentClient = null;
            byte[] cMsg = listener.Receive(ref currentClient);
            string plain = Encoding.ASCII.GetString(cMsg);


            int counter = 0;
            foreach (int byt in cMsg)
            {
                if (counter > 15)
                {
                    counter = 0;
                    Console.Write("\n");
                }
                string hex = byt.ToString("X");
                if (hex.Length == 1) hex = "0" + hex;

                if (counter > 12 && hex == "00")
                {
                    break;
                }

                counter++;
            }

            int totalLength = 12;
            int currentLength;
            List<string> nameList = new List<string>();

            for (int i = 1; i > 0; i++)
            {
                currentLength = cMsg[(i - 1) + totalLength];
                if (currentLength == 0) break;
                nameList.Add(Encoding.ASCII.GetString(cMsg, i + totalLength, currentLength));
                totalLength += currentLength;
            }

            return nameList;
        }

        public void write(byte[] msg, IPEndPoint ep)
        {
            listener.Send(msg, msg.Length, ep);
        }

        public void write(String message, int clientID = 0)
        {
            byte[] sMsg = Encoding.ASCII.GetBytes(message);
            if (clientID > clients.Count)
            {
                return;
            }
            listener.Send(sMsg, sMsg.Length, clients[clientID]);
        }
    }
}
