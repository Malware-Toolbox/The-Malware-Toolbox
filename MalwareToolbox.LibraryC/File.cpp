#include "pch.h"
#include "Utils.h"

#include <iostream>
#include <ostream>
#include <phnt_windows.h>
#include <phnt.h>

using namespace System;
using namespace Collections::Generic;
using namespace Runtime::InteropServices;
using namespace MalwareToolbox::LibraryC::Utils;

WinFile::WinFile(String^ filePath)
	: m_file_path(filePath), m_file_loaded(false)
{
}

WinFile::~WinFile()
{
	Unload();
}

bool WinFile::Load()
{
	if (m_file_loaded) return true;
	
	const LPWSTR file_path_char = Converters::string_to_lpwstr(m_file_path);
	const HANDLE file = CreateFile(
		file_path_char,
		GENERIC_READ,
		FILE_SHARE_WRITE,
		nullptr,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL,
		nullptr
	);
	if (file == INVALID_HANDLE_VALUE)
	{
		std::cout << "Failed to open file: "  << file_path_char << " : " << GetLastError() << std::endl;
		return false;
	}
	
	const DWORD file_size = GetFileSize(file, nullptr);
	const LPVOID file_data = HeapAlloc(GetProcessHeap(), 0, file_size);

	DWORD bytes_read;
	const bool read_status = ReadFile(file, file_data, file_size, &bytes_read, nullptr);
	if (!read_status)
	{
		std::cout << "Failed to read file: " << GetLastError() << std::endl;
		return false;
	}
	m_file = file;
	m_file_size = file_size;
	m_file_data = file_data;
	m_file_loaded = true;

	return true;
}

bool WinFile::Unload()
{
	if (m_file_lock) return false;

	if (m_file) CloseHandle(m_file);
	if (m_file_data) HeapFree(GetProcessHeap(), 0, m_file_data);
	m_file = nullptr;
	m_file_data = nullptr;
	m_file_size = NULL;
	m_file_loaded = false;
	m_file_lock = false;

	return true;
}

BYTE WinFile::GetByte(DWORD64 offset)
{
	if (m_file_data == nullptr) return NULL;
	return *(BYTE*)((DWORD64)m_file_data + offset);
}

String^ WinFile::Path::get()
{
	return m_file_path;
}

DWORD WinFile::Size::get()
{
	return m_file_size;
}

DWORD64 WinFile::DataPointer::get()
{
	if (m_file_data == nullptr) return NULL;
	return reinterpret_cast<DWORD64>(m_file_data);
}

unsigned char* WinFile::Data::get()
{
	if (m_file_data == nullptr) return nullptr;
	return static_cast<unsigned char*>(m_file_data);
}

bool WinFile::Loaded::get()
{
	return m_file_loaded;
}

bool WinFile::Lock::get()
{
	return m_file_lock;
}

void WinFile::Lock::set(bool value)
{
	m_file_lock = value;
}
