#include "pch.h"
#include "Utils.h"

#include <cstdio>
#include <phnt_windows.h>
#include <phnt.h>

using namespace System;
using namespace Collections::Generic;
using namespace Runtime::InteropServices;
using namespace MalwareToolbox::LibraryC::Utils;

File::File(String^ filePath)
	: m_file_path(filePath), m_file_loaded(false)
{
}

File::~File()
{
	Unload();
}

bool File::Load()
{
	if (m_file_loaded) return true;
	
	const char* file_path_char = Converters::string_to_lpstr(m_file_path);
	const HANDLE file = CreateFileA(
		file_path_char,
		GENERIC_ALL,
		FILE_SHARE_READ,
		NULL,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL,
		NULL
	);
	if (file == INVALID_HANDLE_VALUE) return false;

	const DWORD file_size = GetFileSize(file, NULL);
	const LPVOID file_data = HeapAlloc(GetProcessHeap(), 0, file_size);

	DWORD bytes_read;
	const bool read_status = ReadFile(file, file_data, file_size, &bytes_read, NULL);
	if (!read_status) return false;

	m_file = file;
	m_file_size = file_size;
	m_file_data = file_data;
	m_file_loaded = true;
	return true;
}

bool File::Unload()
{
	HeapFree(GetProcessHeap(), 0, m_file_data);
	CloseHandle(m_file);
	m_file = NULL;
	m_file_size = NULL;
	m_file_data = NULL;
	m_file_loaded = false;
	return true;
}

BYTE File::GetByte(DWORD64 offset)
{
	return *(BYTE*)((DWORD64)m_file_data + offset);
}

String^ File::Path::get()
{
	return m_file_path;
}

DWORD File::Size::get()
{
	return m_file_size;
}

unsigned char* File::Data::get()
{
	return static_cast<unsigned char*>(m_file_data);
}

bool File::Loaded::get()
{
	return m_file_loaded;
}
