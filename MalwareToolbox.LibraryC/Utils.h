#pragma once
#include "phnt_windows.h"

using namespace System;

namespace MalwareToolbox {
	namespace LibraryC {
		namespace Utils
		{
			namespace Maths
			{
				template <typename T>
				T round_down(T number, T round)
				{
					return (number / round) * round;
				}

				template <typename T>
				T round_up(T number, T round)
				{
					if (number % round) number = (number / round) * round + round;
					return number;
				}
			}

			namespace Converters
			{
				LPSTR string_to_lpstr(String^ value);
				LPWSTR string_to_lpwstr(String^ value);

				unsigned char* bytearray_to_char(array<Byte>^ value);

				DWORD uchar_to_int32(unsigned char* value);
				DWORD uchar_to_int32_bigendian(unsigned char* value);
				DWORD64 uchar_to_int64(unsigned char* value);
				DWORD64 uchar_to_int64_bigendian(unsigned char* value);

				String^ uchar_to_string(unsigned char* value);
				String^ uchar_to_string(unsigned char* value, int length);
				String^ uchar_to_string_w(unsigned char* value);
				String^ uchar_to_string_w(unsigned char* value, int length);

				array<BYTE>^ uchar_to_bytearray(unsigned char* value, int size);
			}

			public ref class WinFile
			{
			public:
				WinFile(String^ filePath);
				~WinFile();

				virtual bool Load();
				virtual bool Unload();
				BYTE GetByte(DWORD64 offset);

				property String^ Path { String^ get(); }
				property DWORD Size { DWORD get(); }
				property DWORD64 DataPointer { DWORD64 get(); }
				property unsigned char* Data { unsigned char* get(); }
				property bool Loaded { bool get(); }

			protected:
				String^ m_file_path;
				HANDLE m_file;
				DWORD m_file_size;
				LPVOID m_file_data;
				bool m_file_loaded;
			};
		}
	}
}
