#include <windows.h>
#include <iostream>
#include <stdio.h>
#include <tchar.h>
#include <psapi.h>
#include <tlhelp32.h>
#include <processthreadsapi.h>
#define ARRAY_SIZE 1024
#include <winver.h>
#include <string.h>
#include <windows.h>
#include <assert.h>
#include <time.h>
#include <crtdbg.h>
#include <atlstr.h>
#include <accctrl.h>
#include <aclapi.h>
#pragma once
namespace MalwareToolbox {
	namespace LibraryC {
		namespace ProcessAnalysis {
			public ref class Security {

			public:
				DWORD Groups;
				DWORD Privileges;
				SE_OBJECT_TYPE objtype = SE_FILE_OBJECT;
				SECURITY_INFORMATION securityinfo;
				PSID ppsidOwner;
				PSID ppsidGroup;
				PACL ppDacl;
				PACL ppSacl;
				PSECURITY_DESCRIPTOR ppSecurityDescriptor;
				LPBOOL lpbOwnerDefaulted;


				void Initalise(HANDLE hProcess)
				{
					if ((GetSecurityInfo(hProcess, objtype, securityinfo, &ppsidOwner, &ppsidGroup, &ppDacl, &ppSacl, &ppSecurityDescriptor) == ERROR_SUCCESS))
					{
						printf("WORKS! \n");
						if (GetSecurityDescriptorOwner(&ppSecurityDescriptor, &ppsidOwner, lpbOwnerDefaulted) == 0)
						{
							printf("ERROR \n");
							std::cout << GetLastError() << "\n";

						}
						else
						{
							printf("WORKS? \n");
						}




					}

					else
					{
						std::cout << GetLastError() << "\n";
					}



				}


			};
		}
	}
}