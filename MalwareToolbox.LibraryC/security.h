#pragma once
#include <cstdio>
#include <iostream>
#include <phnt_windows.h>
#include <phnt.h>
#include <AccCtrl.h>
#include <AclAPI.h>
#define ARRAY_SIZE 1024

#pragma once
namespace MalwareToolbox {
	namespace LibraryC {
		namespace ProcessAnalysis {
			public ref class Security {

			public:
				DWORD Groups;
				DWORD Privileges;
				SE_OBJECT_TYPE objtype = SE_FILE_OBJECT;
				SECURITY_INFORMATION securityinfo = OWNER_SECURITY_INFORMATION;
				PSID* ppsidOwner;
				PSID* ppsidGroup;
				PACL* ppDacl;
				PACL* ppSacl;
				PSECURITY_DESCRIPTOR* ppSecurityDescriptor;
				LPBOOL lpbOwnerDefaulted;


				void Initalise(HANDLE hProcess)
				{
					if ((GetSecurityInfo(hProcess, objtype, securityinfo, ppsidOwner, ppsidGroup, ppDacl, ppSacl, ppSecurityDescriptor) == ERROR_SUCCESS))
					{
						printf("WORKS! \n");
						if (GetSecurityDescriptorOwner(*ppSecurityDescriptor, ppsidOwner, lpbOwnerDefaulted) == 0)
						{
							printf("ERROR \n");
							std::cout << GetLastError() << "\n";

						}
						else
						{
							printf("WORKS? \n");
						}




					}

					else
					{
						std::cout << GetLastError() << "\n";
					}



				}


			};
		}
	}
}