#pragma once
#include "Executables.h"


namespace MalwareToolbox {
    namespace LibraryC {
        namespace ProcessAnalysis {

            typedef struct _LANGANDCODEPAGE {
                WORD wLanguage;
                WORD wCodePage;
            } LANGANDCODEPAGE, *LPLANGANDCODEPAGE;

            public interface class IProcess
            {
                virtual property DWORD ProcessID { DWORD get(); void set(DWORD value); }
                virtual property String^ ProcessName { String^ get(); void set(String^ value); }
                virtual property String^ ProcessPath { String^ get(); void set(String^ value); }
                virtual property String^ Description { String^ get(); void set(String^ value); }
                virtual property int Priority { int get(); void set(int value); }
                virtual property DateTime CreationTime { DateTime get(); void set(DateTime value); }
                virtual property DateTime ExitTime { DateTime get(); void set(DateTime value); }
                virtual property TimeSpan KernelTime { TimeSpan get(); void set(TimeSpan value); }
                virtual property TimeSpan UserTime { TimeSpan get(); void set(TimeSpan value); }
                virtual property DWORD HandlesCount { DWORD get(); void set(DWORD value); }
                virtual property DWORD GDIHandles { DWORD get(); void set(DWORD value); }
                virtual property DWORD UserHandles { DWORD get(); void set(DWORD value); }
                virtual property SIZE_T PrivateUsage { SIZE_T get(); void set(SIZE_T value); }
            };

            public ref class Process : IProcess
            {
            public:
                virtual property DWORD ProcessID { DWORD get(); void set(DWORD value); }
                virtual property String^ ProcessName { String^ get(); void set(String^ value); }
                virtual property String^ ProcessPath { String^ get(); void set(String^ value); }
                virtual property String^ Description { String^ get(); void set(String^ value); }
                virtual property int Priority { int get(); void set(int value); }
                virtual property DateTime CreationTime { DateTime get(); void set(DateTime value); }
                virtual property DateTime ExitTime { DateTime get(); void set(DateTime value); }
                virtual property TimeSpan KernelTime { TimeSpan get(); void set(TimeSpan value); }
                virtual property TimeSpan UserTime { TimeSpan get(); void set(TimeSpan value); }
                virtual property DWORD HandlesCount { DWORD get(); void set(DWORD value); }
                virtual property DWORD GDIHandles { DWORD get(); void set(DWORD value); }
                virtual property DWORD UserHandles { DWORD get(); void set(DWORD value); }
                virtual property SIZE_T PrivateUsage { SIZE_T get(); void set(SIZE_T value); }

            private:
                DWORD _ProcessID;
				String^ _ProcessName;
				String^ _ProcessPath;
				String^ _Description;
                int _Priority;
                DateTime _CreationTime;
                DateTime _ExitTime;
                TimeSpan _KernelTime;
                TimeSpan _UserTime;
                DWORD _HandlesCount;
                DWORD _GDIHandles;
                DWORD _UserHandles;
                SIZE_T _PrivateUsage;
			};

            public ref class Thread
            {
            public:
                property DWORD ProcessID { DWORD get(); void set(DWORD value); }
                property DWORD ThreadID { DWORD get(); void set(DWORD value); }
                property int Priority { int get(); void set(int value); }
                property DateTime^ CreationTime { DateTime^ get(); void set(DateTime^ value); }
                property DateTime^ ExitTime { DateTime^ get(); void set(DateTime^ value); }
                property TimeSpan^ KernelTime { TimeSpan^ get(); void set(TimeSpan^ value); }
                property TimeSpan^ UserTime { TimeSpan^ get(); void set(TimeSpan^ value); }

            private:
                DWORD _ProcessID;
                DWORD _ThreadID;
                int _Priority;
                DateTime^ _CreationTime;
                DateTime^ _ExitTime;
                TimeSpan^ _KernelTime;
                TimeSpan^ _UserTime;
            };

            public ref class ProcessProvider
            {
            public:
	            explicit ProcessProvider(Func<IProcess^>^ createProcess)
		            : _CreateProcess(createProcess)
	            {
	            }

                Dictionary<DWORD, IProcess^>^ GetProcesses();
                void UpdateProcesses(Dictionary<DWORD, IProcess^>^ processMap);
                IProcess^ GetProcess(DWORD processID);
                bool UpdateProcess(IProcess^ process);
                List<Thread^>^ GetThreads(DWORD processID);
                Thread^ GetThread(DWORD processID, DWORD threadID);

            private:
                Func<IProcess^>^ _CreateProcess;
            };
        }
    }
}
