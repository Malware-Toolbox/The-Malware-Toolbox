#pragma once
#include "Executables.h"


namespace MalwareToolbox {
    namespace LibraryC {
        namespace ProcessAnalysis {

            typedef struct _LANGANDCODEPAGE {
                WORD wLanguage;
                WORD wCodePage;
            } LANGANDCODEPAGE, *LPLANGANDCODEPAGE;

            public ref class Account
            {
            public:
                property String^ Domain { String^ get(); void set(String^ value); }
                property String^ Name { String^ get(); void set(String^ value); }
                property String^ Sid { String^ get(); void set(String^ value); }
                property String^ SidType { String^ get(); void set(String^ value); }
                property DWORD Attributes { DWORD get(); void set(DWORD value); }

                property String^ Display { String^ get(); }

            private:
                String^ _domain;
                String^ _name;
                String^ _sid;
                String^ _sidType;
                DWORD _attributes;
            };

            public ref class TokenPrivilege
            {
            public:
                property String^ Name { String^ get(); void set(String^ value); }
                property String^ Description { String^ get(); void set(String^ value); }
                property DWORD Attributes { DWORD get(); void set(DWORD value); }

            private:
                String^ _name;
                String^ _description;
                DWORD _attributes;
            };

            public ref struct Token
            {
                Account^ User;
                Account^ Owner;
                Account^ PrimaryGroup;
                DWORD SessionId;
                bool IsElevated;
                String^ ElevationType;
                bool VirtualizationEnabled;
                bool VirtualizationAllowed;
                List<Account^>^ Groups;
                List<TokenPrivilege^>^ Privileges;
                ULONGLONG TokenId;
                ULONGLONG AuthenticationId;
                LONGLONG ExpirationTime;
                String^ TokenType;
                String^ ImpersonationLevel;
                DWORD DynamicCharged;
                DWORD DynamicAvailable;
                DWORD GroupCount;
                DWORD PrivilegeCount;
                ULONGLONG ModifiedId;
                String^ SourceName;
                ULONGLONG SourceIdentifier;
                bool HasRestrictions;
                bool SandBoxInert;
            };

            public ref class Module
            {
            public:
                property String^ Name { String^ get(); void set(String^ value); }
                property String^ Path { String^ get(); void set(String^ value); }
                property String^ Description { String^ get(); void set(String^ value); }

            private:
                String^ _Name;
                String^ _Path;
                String^ _Description;
            };

            public interface class IThread
            {
                virtual property DWORD ProcessID { DWORD get(); void set(DWORD value); }
                virtual property DWORD ThreadID { DWORD get(); void set(DWORD value); }

                virtual property int Priority { int get(); void set(int value); }

                virtual property DateTime CreationTime { DateTime get(); void set(DateTime value); }
                virtual property DateTime ExitTime { DateTime get(); void set(DateTime value); }
                virtual property TimeSpan KernelTime { TimeSpan get(); void set(TimeSpan value); }
                virtual property TimeSpan UserTime { TimeSpan get(); void set(TimeSpan value); }

                virtual property ULONG64 CycleTime { ULONG64 get(); void set(ULONG64 value); }
            };

            public ref class Thread //: IThread
            {
            public:
                virtual property DWORD ProcessID { DWORD get(); void set(DWORD value); }
                virtual property DWORD ThreadID { DWORD get(); void set(DWORD value); }

                virtual property int Priority { int get(); void set(int value); }

                virtual property DateTime CreationTime { DateTime get(); void set(DateTime value); }
                virtual property DateTime ExitTime { DateTime get(); void set(DateTime value); }
                virtual property TimeSpan KernelTime { TimeSpan get(); void set(TimeSpan value); }
                virtual property TimeSpan UserTime { TimeSpan get(); void set(TimeSpan value); }

                // virtual property ULONG64 CycleTime { ULONG64 get(); void set(ULONG64 value); }

            private:
                DWORD _ProcessID;
                DWORD _ThreadID;
                int _Priority;
                DateTime _CreationTime;
                DateTime _ExitTime;
                TimeSpan _KernelTime;
                TimeSpan _UserTime;
            };

            public interface class IProcess
            {
                virtual property DWORD ProcessID { DWORD get(); void set(DWORD value); }
                virtual property String^ ProcessName { String^ get(); void set(String^ value); }
                virtual property String^ ProcessPath { String^ get(); void set(String^ value); }
                virtual property String^ Description { String^ get(); void set(String^ value); }

                virtual property int Priority { int get(); void set(int value); }

                virtual property DateTime CreationTime { DateTime get(); void set(DateTime value); }
                virtual property DateTime ExitTime { DateTime get(); void set(DateTime value); }
                virtual property TimeSpan KernelTime { TimeSpan get(); void set(TimeSpan value); }
                virtual property TimeSpan UserTime { TimeSpan get(); void set(TimeSpan value); }

                virtual property ULONG64 CycleTime { ULONG64 get(); void set(ULONG64 value); }

                virtual property DWORD HandlesCount { DWORD get(); void set(DWORD value); }
                virtual property DWORD GDIHandles { DWORD get(); void set(DWORD value); }
                virtual property DWORD UserHandles { DWORD get(); void set(DWORD value); }

                virtual property DWORD PageFaultCount { DWORD get(); void set(DWORD value); }
                virtual property SIZE_T PeakWorkingSetSize { SIZE_T get(); void set(SIZE_T value); }
                virtual property SIZE_T WorkingSetSize { SIZE_T get(); void set(SIZE_T value); }
                virtual property SIZE_T QuotaPeakPagedPoolUsage { SIZE_T get(); void set(SIZE_T value); }
                virtual property SIZE_T QuotaPagedPoolUsage { SIZE_T get(); void set(SIZE_T value); }
                virtual property SIZE_T QuotaPeakNonPagedPoolUsage { SIZE_T get(); void set(SIZE_T value); }
                virtual property SIZE_T QuotaNonPagedPoolUsage { SIZE_T get(); void set(SIZE_T value); }
                virtual property SIZE_T PagefileUsage { SIZE_T get(); void set(SIZE_T value); }
                virtual property SIZE_T PeakPagefileUsage { SIZE_T get(); void set(SIZE_T value); }
                virtual property SIZE_T PrivateUsage { SIZE_T get(); void set(SIZE_T value); }

                virtual property ULONGLONG ReadOperationCount { ULONGLONG get(); void set(ULONGLONG value); }
                virtual property ULONGLONG WriteOperationCount { ULONGLONG get(); void set(ULONGLONG value); }
                virtual property ULONGLONG OtherOperationCount { ULONGLONG get(); void set(ULONGLONG value); }
                virtual property ULONGLONG ReadTransferCount { ULONGLONG get(); void set(ULONGLONG value); }
                virtual property ULONGLONG WriteTransferCount { ULONGLONG get(); void set(ULONGLONG value); }
                virtual property ULONGLONG OtherTransferCount { ULONGLONG get(); void set(ULONGLONG value); }

                virtual property Dictionary<DWORD, IThread^>^ Threads { Dictionary<DWORD, IThread^>^ get(); void set(Dictionary<DWORD, IThread^>^ value); }
                virtual property bool DoThreadsLoad { bool get(); void set(bool value); }
            };

            public ref class Process //: IProcess
            {
            public:
                virtual property DWORD ProcessID { DWORD get(); void set(DWORD value); }
                virtual property String^ ProcessName { String^ get(); void set(String^ value); }
                virtual property String^ ProcessPath { String^ get(); void set(String^ value); }
                virtual property String^ Description { String^ get(); void set(String^ value); }

                virtual property int Priority { int get(); void set(int value); }

                virtual property DateTime CreationTime { DateTime get(); void set(DateTime value); }
                virtual property DateTime ExitTime { DateTime get(); void set(DateTime value); }
                virtual property TimeSpan KernelTime { TimeSpan get(); void set(TimeSpan value); }
                virtual property TimeSpan UserTime { TimeSpan get(); void set(TimeSpan value); }

                virtual property DWORD HandlesCount { DWORD get(); void set(DWORD value); }
                virtual property DWORD GDIHandles { DWORD get(); void set(DWORD value); }
                virtual property DWORD UserHandles { DWORD get(); void set(DWORD value); }

                // virtual property DWORD PageFaultCount { DWORD get(); void set(DWORD value); }
                // virtual property SIZE_T PeakWorkingSetSize { SIZE_T get(); void set(SIZE_T value); }
                // virtual property SIZE_T WorkingSetSize { SIZE_T get(); void set(SIZE_T value); }
                // virtual property SIZE_T QuotaPeakPagedPoolUsage { SIZE_T get(); void set(SIZE_T value); }
                // virtual property SIZE_T QuotaPagedPoolUsage { SIZE_T get(); void set(SIZE_T value); }
                // virtual property SIZE_T QuotaPeakNonPagedPoolUsage { SIZE_T get(); void set(SIZE_T value); }
                // virtual property SIZE_T QuotaNonPagedPoolUsage { SIZE_T get(); void set(SIZE_T value); }
                // virtual property SIZE_T PagefileUsage { SIZE_T get(); void set(SIZE_T value); }
                // virtual property SIZE_T PeakPagefileUsage { SIZE_T get(); void set(SIZE_T value); }
                virtual property SIZE_T PrivateUsage { SIZE_T get(); void set(SIZE_T value); }
                //
                // virtual property ULONGLONG ReadOperationCount { ULONGLONG get(); void set(ULONGLONG value); }
                // virtual property ULONGLONG WriteOperationCount { ULONGLONG get(); void set(ULONGLONG value); }
                // virtual property ULONGLONG OtherOperationCount { ULONGLONG get(); void set(ULONGLONG value); }
                // virtual property ULONGLONG ReadTransferCount { ULONGLONG get(); void set(ULONGLONG value); }
                // virtual property ULONGLONG WriteTransferCount { ULONGLONG get(); void set(ULONGLONG value); }
                // virtual property ULONGLONG OtherTransferCount { ULONGLONG get(); void set(ULONGLONG value); }

                virtual property Dictionary<DWORD, IThread^>^ Threads { Dictionary<DWORD, IThread^>^ get(); void set(Dictionary<DWORD, IThread^>^ value); }
                virtual property bool DoThreadsLoad { bool get(); void set(bool value); }

            private:
                DWORD _ProcessID;
				String^ _ProcessName;
				String^ _ProcessPath;
				String^ _Description;
                int _Priority;
                DateTime _CreationTime;
                DateTime _ExitTime;
                TimeSpan _KernelTime;
                TimeSpan _UserTime;
                DWORD _HandlesCount;
                DWORD _GDIHandles;
                DWORD _UserHandles;
                SIZE_T _PrivateUsage;
                Dictionary<DWORD, IThread^>^ _Threads;
                bool _DoThreadsLoad;
			};

            public ref class ProcessProvider
            {
            public:
            	ProcessProvider(Func<IProcess^>^ createProcess, Func<IThread^>^ createThread);

                Dictionary<DWORD, IProcess^>^ QueryProcesses();

                IProcess^ GetProcess(DWORD processID);
                IProcess^ FetchProcess(DWORD processID);
                bool UpdateProcess(IProcess^ process);

                Dictionary<DWORD, IThread^>^ QueryThreads(DWORD processID);
                Dictionary<DWORD, IThread^>^ QueryThreads(IProcess^ process);

                IThread^ GetThread(DWORD processID, DWORD threadID);
                IThread^ FetchThread(DWORD processID, DWORD threadID);
                bool UpdateThread(IThread^ thread);

                List<Module^>^ QueryModules(IProcess^ process);

                Token^ QueryToken(IProcess^ process);
                PVOID QueryTokenInfo(HANDLE hToken, TOKEN_INFORMATION_CLASS tokenClass);
                Account^ LoadAccount(SID_AND_ATTRIBUTES sid);
                Account^ LoadAccount(PSID sid);

            private:
                Func<IProcess^>^ _CreateProcess;
                Func<IThread^>^ _CreateThread;
                Dictionary<DWORD, IProcess^>^ _ProcessCache;
            };
        }
    }
}
