#pragma once
#include "Executables.h"


namespace MalwareToolbox {
    namespace LibraryC {
        namespace ProcessAnalysis {

            typedef struct _LANGANDCODEPAGE {
                WORD wLanguage;
                WORD wCodePage;
            } LANGANDCODEPAGE, *LPLANGANDCODEPAGE;

            public ref class Process
            {
            public:
                property DWORD ProcessID { DWORD get(); void set(DWORD value); }
                property String^ ProcessName { String^ get(); void set(String^ value); }
                property String^ ProcessPath { String^ get(); void set(String^ value); }
                property String^ Description { String^ get(); void set(String^ value); }
                property int Priority { int get(); void set(int value); }
                property DateTime^ CreationTime { DateTime^ get(); void set(DateTime^ value); }
                property DateTime^ ExitTime { DateTime^ get(); void set(DateTime^ value); }
                property TimeSpan^ KernelTime { TimeSpan^ get(); void set(TimeSpan^ value); }
                property TimeSpan^ UserTime { TimeSpan^ get(); void set(TimeSpan^ value); }
            private:
                DWORD _ProcessID;
				String^ _ProcessName;
				String^ _ProcessPath;
				String^ _Description;
                int _Priority;
                DateTime^ _CreationTime;
                DateTime^ _ExitTime;
                TimeSpan^ _KernelTime;
                TimeSpan^ _UserTime;
			};

            public ref class Thread
            {
            public:
                property DWORD ProcessID { DWORD get(); void set(DWORD value); }
                property DWORD ThreadID { DWORD get(); void set(DWORD value); }
                property int Priority { int get(); void set(int value); }
                property DateTime^ CreationTime { DateTime^ get(); void set(DateTime^ value); }
                property DateTime^ ExitTime { DateTime^ get(); void set(DateTime^ value); }
                property TimeSpan^ KernelTime { TimeSpan^ get(); void set(TimeSpan^ value); }
                property TimeSpan^ UserTime { TimeSpan^ get(); void set(TimeSpan^ value); }

            private:
                DWORD _ProcessID;
                DWORD _ThreadID;
                int _Priority;
                DateTime^ _CreationTime;
                DateTime^ _ExitTime;
                TimeSpan^ _KernelTime;
                TimeSpan^ _UserTime;
            };

            public ref class ProcessProvider
            {
            public:
                array<Process^>^ GetProcesses();
                Process^ GetProcess(DWORD processID);
                List<Thread^>^ GetThreads(DWORD processID);
                Thread^ GetThread(DWORD processID, DWORD threadID);
            };

        }
    }
}
