#pragma once
#include "Executables.h"


namespace MalwareToolbox {
    namespace LibraryC {
        namespace ProcessAnalysis {

            typedef struct _LANGANDCODEPAGE {
                WORD wLanguage;
                WORD wCodePage;
            } LANGANDCODEPAGE, *LPLANGANDCODEPAGE;

            public interface class IThread
            {
                virtual property DWORD ProcessID { DWORD get(); void set(DWORD value); }
                virtual property DWORD ThreadID { DWORD get(); void set(DWORD value); }
                virtual property int Priority { int get(); void set(int value); }
                virtual property DateTime CreationTime { DateTime get(); void set(DateTime value); }
                virtual property DateTime ExitTime { DateTime get(); void set(DateTime value); }
                virtual property TimeSpan KernelTime { TimeSpan get(); void set(TimeSpan value); }
                virtual property TimeSpan UserTime { TimeSpan get(); void set(TimeSpan value); }
            };

            public ref class Thread : IThread
            {
            public:
                virtual property DWORD ProcessID { DWORD get(); void set(DWORD value); }
                virtual property DWORD ThreadID { DWORD get(); void set(DWORD value); }
                virtual property int Priority { int get(); void set(int value); }
                virtual property DateTime CreationTime { DateTime get(); void set(DateTime value); }
                virtual property DateTime ExitTime { DateTime get(); void set(DateTime value); }
                virtual property TimeSpan KernelTime { TimeSpan get(); void set(TimeSpan value); }
                virtual property TimeSpan UserTime { TimeSpan get(); void set(TimeSpan value); }

            private:
                DWORD _ProcessID;
                DWORD _ThreadID;
                int _Priority;
                DateTime _CreationTime;
                DateTime _ExitTime;
                TimeSpan _KernelTime;
                TimeSpan _UserTime;
            };

            public interface class IProcess
            {
                virtual property DWORD ProcessID { DWORD get(); void set(DWORD value); }
                virtual property String^ ProcessName { String^ get(); void set(String^ value); }
                virtual property String^ ProcessPath { String^ get(); void set(String^ value); }
                virtual property String^ Description { String^ get(); void set(String^ value); }
                virtual property int Priority { int get(); void set(int value); }
                virtual property DateTime CreationTime { DateTime get(); void set(DateTime value); }
                virtual property DateTime ExitTime { DateTime get(); void set(DateTime value); }
                virtual property TimeSpan KernelTime { TimeSpan get(); void set(TimeSpan value); }
                virtual property TimeSpan UserTime { TimeSpan get(); void set(TimeSpan value); }
                virtual property DWORD HandlesCount { DWORD get(); void set(DWORD value); }
                virtual property DWORD GDIHandles { DWORD get(); void set(DWORD value); }
                virtual property DWORD UserHandles { DWORD get(); void set(DWORD value); }
                virtual property SIZE_T PrivateUsage { SIZE_T get(); void set(SIZE_T value); }
                virtual property Dictionary<DWORD, IThread^>^ Threads { Dictionary<DWORD, IThread^>^ get(); void set(Dictionary<DWORD, IThread^>^ value); }
                virtual property bool DoThreadsLoad { bool get(); void set(bool value); }
            };

            public ref class Process : IProcess
            {
            public:
                virtual property DWORD ProcessID { DWORD get(); void set(DWORD value); }
                virtual property String^ ProcessName { String^ get(); void set(String^ value); }
                virtual property String^ ProcessPath { String^ get(); void set(String^ value); }
                virtual property String^ Description { String^ get(); void set(String^ value); }
                virtual property int Priority { int get(); void set(int value); }
                virtual property DateTime CreationTime { DateTime get(); void set(DateTime value); }
                virtual property DateTime ExitTime { DateTime get(); void set(DateTime value); }
                virtual property TimeSpan KernelTime { TimeSpan get(); void set(TimeSpan value); }
                virtual property TimeSpan UserTime { TimeSpan get(); void set(TimeSpan value); }
                virtual property DWORD HandlesCount { DWORD get(); void set(DWORD value); }
                virtual property DWORD GDIHandles { DWORD get(); void set(DWORD value); }
                virtual property DWORD UserHandles { DWORD get(); void set(DWORD value); }
                virtual property SIZE_T PrivateUsage { SIZE_T get(); void set(SIZE_T value); }
                virtual property Dictionary<DWORD, IThread^>^ Threads { Dictionary<DWORD, IThread^>^ get(); void set(Dictionary<DWORD, IThread^>^ value); }
                virtual property bool DoThreadsLoad { bool get(); void set(bool value); }

            private:
                DWORD _ProcessID;
				String^ _ProcessName;
				String^ _ProcessPath;
				String^ _Description;
                int _Priority;
                DateTime _CreationTime;
                DateTime _ExitTime;
                TimeSpan _KernelTime;
                TimeSpan _UserTime;
                DWORD _HandlesCount;
                DWORD _GDIHandles;
                DWORD _UserHandles;
                SIZE_T _PrivateUsage;
                Dictionary<DWORD, IThread^>^ _Threads;
                bool _DoThreadsLoad;
			};

            public ref class ProcessProvider
            {
            public:
            	ProcessProvider(Func<IProcess^>^ createProcess, Func<IThread^>^ createThread);

                Dictionary<DWORD, IProcess^>^ GetProcesses();

                IProcess^ LoadProcess(DWORD processID);
                IProcess^ GetProcess(DWORD processID);
                bool UpdateProcess(IProcess^ process);

                Dictionary<DWORD, IThread^>^ GetThreads(DWORD processID);
                Dictionary<DWORD, IThread^>^ get_threads(IProcess^ process);

                IThread^ GetThread(DWORD processID, DWORD threadID);
                bool UpdateThread(IThread^ thread);

            private:
                Func<IProcess^>^ _CreateProcess;
                Func<IThread^>^ _CreateThread;
                Dictionary<DWORD, IProcess^>^ _ProcessCache;
            };
        }
    }
}
