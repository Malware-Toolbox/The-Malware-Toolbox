#include "pch.h"
#include "Strings.h"
#include "Utils.h"

#include <ctype.h>
#include <iostream>
#include <regex>

using namespace std;
using namespace System::Text;
using namespace MalwareToolbox::LibraryC::Strings;
using namespace MalwareToolbox::LibraryC::Utils;

std::regex url("\\b((?:https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:, .;]*[-a-zA-Z0-9+&@#/%=~_|])");
std::regex ipv4("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])");
std::regex ipv6("((([0-9a-fA-F]){1,4})\\:){7}([0-9a-fA-F]){1,4}");

bool UrlMatcher(String^ str)
{
	return std::regex_match(Converters::string_to_lpstr(str), url);
}

StringCategoriser::StringCategoriser()
{
	m_matchers = gcnew List<Tuple<String^, StringCategoryMatcher^>^>();
	AddMatcher("Url", gcnew StringCategoryMatcher(UrlMatcher));
}

void StringCategoriser::AddMatcher(String^ category_name, StringCategoryMatcher^ matchers)
{
	Tuple<String^, StringCategoryMatcher^>^ matcher = gcnew Tuple<String^, StringCategoryMatcher^>(category_name, matchers);
	m_matchers->Add(matcher);
}

List<Tuple<String^, String^>^>^ StringCategoriser::CatergoriseStrings(List<String^>^ strings)
{
	List<Tuple<String^, String^>^>^ stringCats = gcnew List<Tuple<String^, String^>^>(strings->Count);

	for each (String^ str in strings)
	{
		Tuple<String^, String^>^ stringCat = gcnew Tuple<String^, String^>(GetCategory(str), str);
		stringCats->Add(stringCat);
	}

	return stringCats;
}

String^ StringCategoriser::GetCategory(String^ str)
{
	for each (Tuple<String^, StringCategoryMatcher^> ^ matcher in m_matchers)
	{
		if (matcher->Item2(str))
		{
			return matcher->Item1;
		}
	}
	return nullptr;
}

StringAnalyser::StringAnalyser(Utils::File^ file) : m_file(file)
{
}

List<String^>^ StringAnalyser::GenerateStrings(int minLength, int maxLength)
{
	List<String^>^ strings = gcnew List<String^>();
	string str = "";
	for (DWORD i = 0; i < m_file->Size; i++)
	{
		if (isprint(m_file->Data[i]))
		{
			str += static_cast<char>(m_file->Data[i]);
		}
		else
		{
			if (str.size() >= minLength || str.size() >= maxLength)
			{
				strings->Add(gcnew String(str.c_str()));
			}
			str = "";
		}
	}

	return strings;
}
