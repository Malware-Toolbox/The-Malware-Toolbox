#pragma once
#include "phnt_windows.h"
#include "Utils.h"

using namespace System;
using namespace Collections::Generic;

namespace MalwareToolbox {
	namespace LibraryC {
		namespace RegShot
		{
			ref struct RegistryKey;

			public ref struct RegistryKeyMeta
			{
				DWORD SubKeysCount;
				DWORD MaxSubKeyNameSize;
				DWORD MaxClassSize;
				DWORD ValuesCount;
				DWORD MaxValueNameSize;
				DWORD MaxValueDataSize;
				DWORD SecurityDescriptorSize;
			};

			public ref struct RegistryValue
			{
				~RegistryValue();

				RegistryKey^ Key;
				String^ Name;
				DWORD Type;
				Object^ Data;

				void ParseData(DWORD type, LPBYTE data, DWORD data_size);
				String^ ToString() override;
				bool Equals(Object^ o) override;
			};

			public ref struct RegistryKey
			{
				~RegistryKey();

				RegistryKey^ ParentKey;
				String^ Name;
				String^ FullPath;
				RegistryKeyMeta^ Meta;
				Dictionary<String^, RegistryKey^>^ SubKeys;
				Dictionary<String^, RegistryValue^>^ Values;
			};

			public ref class RegistryHiveType
			{
			public:
				static const RegistryHiveType^ HkeyClassesRoot = gcnew RegistryHiveType(HKEY_CLASSES_ROOT, "HKEY_CLASSES_ROOT");
				static const RegistryHiveType^ HkeyCurrentUser = gcnew RegistryHiveType(HKEY_CURRENT_USER, "HKEY_CURRENT_USER");
				static const RegistryHiveType^ HkeyLocalMachine = gcnew RegistryHiveType(HKEY_LOCAL_MACHINE, "HKEY_LOCAL_MACHINE");
				static const RegistryHiveType^ HkeyUsers = gcnew RegistryHiveType(HKEY_USERS, "HKEY_USERS");
				static const RegistryHiveType^ HkeyCurrentConfig = gcnew RegistryHiveType(HKEY_CURRENT_CONFIG, "HKEY_CURRENT_CONFIG");

				static RegistryHiveType^ FromString(String^ hiveName);
				static IList<RegistryHiveType^>^ GetAllTypes();

				property HKEY Hkey { HKEY get(); }
				property String^ Name { String^ get(); }

			private:
				static List<RegistryHiveType^>^ hive_types;

				HKEY m_hkey;
				String^ m_name;

				RegistryHiveType(HKEY hkey, String^ name);
			};

			public ref struct RegistrySnapshot
			{
				RegistrySnapshot(String^ name);
				RegistrySnapshot(String^ name, RegistryHiveType^ hiveType);

				String^ Name;
				DateTime CaptureTime;
				RegistryHiveType^ HiveType;
				RegistryKey^ Key;
			};

			public enum class DiffType
			{
				None,
				Deleted,
				Added,
				Modified,
			};

			public ref struct RegistryValueDiff
			{
				RegistryValueDiff(DiffType type, RegistryValue^ old) : Type(type), Old(old) { };
				RegistryValueDiff(DiffType type, RegistryValue^ old, RegistryValue^ neww) : Type(type), Old(old), New(neww) { };

				DiffType Type;
				RegistryValue^ Old;
				RegistryValue^ New;

				property String^ Name { String^ get(); }
			};

			public ref struct RegistryKeyDiff
			{
				RegistryKeyDiff(DiffType type, RegistryKey^ key): Type(type), Key(key) { };
				RegistryKeyDiff(DiffType type, RegistryKey^ key, List<RegistryValueDiff^>^ valuesDiff) : Type(type), Key(key), ValuesDiff(valuesDiff) { };

				DiffType Type;
				RegistryKey^ Key;
				List<RegistryValueDiff^>^ ValuesDiff;
			};

			public ref class RegShot
			{
			public:
				RegistrySnapshot^ TakeSnapshot(RegistryHiveType^ hiveType);
				List<RegistrySnapshot^>^ TakeSnapshots(List<RegistryHiveType^>^ hiveTypes);
				List<RegistryKeyDiff^>^ CompareSnapshots(RegistrySnapshot^ first, RegistrySnapshot^ second);
				int NextCount();

			private:
				int m_snapshot_count = NULL;

				void GenerateRegData(HKEY parent_key, LPWSTR key_name, RegistryKey^ reg_key);
				void CompareRegSnapshots(RegistryKey^ first, RegistryKey^ second, List<RegistryKeyDiff^>^ diff);
			};
		}
	}
}
