#include <windows.h>
#include <iostream>
#include <stdio.h>
#include <tchar.h>
#include <psapi.h>
#include <tlhelp32.h>
#include <processthreadsapi.h>
#define ARRAY_SIZE 1024
#include <winver.h>
#include <string.h>
#include <windows.h>
#include <assert.h>
#include <time.h>
#include <crtdbg.h>
#include <atlstr.h>
#include <pdh.h>
#pragma once

namespace MalwareToolbox {
    namespace LibraryC {
        namespace ProcessAnalysis {

            public ref class Performance {
            public:
                //CPU: All Found 
                DWORD ProcessID;
                SYSTEMTIME ProcessCreationTime;
                SYSTEMTIME ProcessExitTime;
                SYSTEMTIME ProcessKernelTime;
                SYSTEMTIME ProcessUserTime;
                INT ProcessPriority;

                //VirtualMem
                SIZE_T PrivateBytes; //Found 
                DWORD PeakPrivateBytes;
                DWORD VirtualSize;
                SIZE_T PageFaults; //Found
                DWORD PageFaultDelta;

                //Physical Mem
                DWORD MemoryPriority;
                SIZE_T WorkingSet; //Found
                SIZE_T WorkingSetPrivate;
                SIZE_T WorkingSetShareable;
                SIZE_T WorkingSetShared;
                SIZE_T PeakWorkingSet; //Found

                // IO: All Found 
                IO_COUNTERS IOCounters; // Member attributes include: 
                                              //  ULONGLONG ReadOperationCount;
                                              //  ULONGLONG WriteOperationCount;
                                              //  ULONGLONG OtherOperationCount;
                                              //  ULONGLONG ReadTransferCount;
                                              //  ULONGLONG WriteTransferCount;
                                              //  ULONGLONG OtherTransferCount;

                // Handles: All Found 
                DWORD Handles;
                DWORD GDIHandles;
                DWORD UserHandles;


                void InitaliseAll(HANDLE hProcess, DWORD processID)
                {
                    InitaliseCPU(hProcess, processID); // DONE
                    InitaliseMem(hProcess);
                    InitaliseIO(hProcess);
                    InitaliseHandles(hProcess); //DONE

                }

                void InitaliseCPU(HANDLE hProcess, DWORD processID) // Done, CPU % optional 
                {
                    // CPU Usage by process 
                    ProcessID = processID;
                    FILETIME pTimes[4];
                    GetProcessTimes(hProcess, &pTimes[0], &pTimes[1], &pTimes[2], &pTimes[3]);
                    FileTimeToSystemTime(&pTimes[0], &ProcessCreationTime); //Creation time 
                    FileTimeToSystemTime(&pTimes[1], &ProcessExitTime); // Exit Time
                    FileTimeToSystemTime(&pTimes[2], &ProcessKernelTime); // Kernel Time
                    FileTimeToSystemTime(&pTimes[3], &ProcessUserTime); // User Time 
                    ProcessPriority = GetPriorityClass(hProcess); // CPU Priority 

                    // END 


                    //Total CPU Currently used 
                    static PDH_HQUERY cpuQuery;
                    static PDH_HCOUNTER cpuTotal;
                    PdhOpenQuery(NULL, NULL, &cpuQuery);
                    // You can also use L"\\Processor(*)\\% Processor Time" and get individual CPU values with PdhGetFormattedCounterArray()
                    PdhAddEnglishCounter(cpuQuery, L"\\Processor(_Total)\\% Processor Time", NULL, &cpuTotal);
                    PdhCollectQueryData(cpuQuery);


                }

                void InitaliseMem(HANDLE hProcess)
                {
                    //Total Virtual memory (Not by process) 
                    MEMORYSTATUSEX memInfo;
                    memInfo.dwLength = sizeof(MEMORYSTATUSEX);
                    GlobalMemoryStatusEx(&memInfo);
                    DWORDLONG totalVirtualMem = memInfo.ullTotalPageFile; // Gives Virtual Memory Size, size of swap file + RAM 
                    DWORDLONG virtualMemUsed = memInfo.ullTotalPageFile - memInfo.ullAvailPageFile;

                    // END 

                    //Total Physical Memory (Not By Process) 
                    DWORDLONG totalPhysMem = memInfo.ullTotalPhys;
                    DWORDLONG physMemUsed = memInfo.ullTotalPhys - memInfo.ullAvailPhys;



                    // Virtual Memory currently used by current process 
                    PROCESS_MEMORY_COUNTERS_EX pmc;
                    GetProcessMemoryInfo(hProcess, (PROCESS_MEMORY_COUNTERS*)&pmc, sizeof(pmc));
                    PrivateBytes = pmc.PrivateUsage; //Virtual Size
                    PageFaults = pmc.PageFaultCount;



                    //Physical Memory 
                    WorkingSet = pmc.WorkingSetSize;
                    PeakWorkingSet = pmc.PeakWorkingSetSize;


                    // END 



                }
                void InitaliseIO(HANDLE hProcess)
                {
                    GetProcessIoCounters(hProcess, &IOCounters);

                }


                void InitaliseHandles(HANDLE hProcess) // Completed 
                {
                    GetProcessHandleCount(hProcess, &Handles); //Process Handles 
                    GDIHandles = GetGuiResources(hProcess, 0); // GDI (Graphical interface handles)
                    UserHandles = GetGuiResources(hProcess, 1); // User Handles 

                }

                void PrintAll()
                {
                    printf("Performance Information \n");
                    printf("ProcessID %d \n", ProcessID);
                    printf("Process Priority %x \n", ProcessPriority);
                    printf("Private Bytes: %x \n", PrivateBytes);
                    printf("Page Faults: %x \n", PageFaults);
                    printf("Working Set: %x \n", WorkingSet);
                    printf("Peak Working Set: %x \n", PeakWorkingSet);
                    printf("Handles: %x", Handles);
                    printf("GDIHandles: %x", Handles);
                    printf("User Handles: %x", UserHandles);
                    printf("IO COunters try1: %d", IOCounters.ReadOperationCount);
                }
            };
        }
    }
}