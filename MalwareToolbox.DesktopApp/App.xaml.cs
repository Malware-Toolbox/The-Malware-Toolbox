using System;
using MalwareToolbox.DesktopApp.Core.AppWindows;
using Microsoft.UI.Xaml;
using MalwareToolbox.DesktopApp.Core.Configurations;
using MalwareToolbox.DesktopApp.Core.Navigations;
using MalwareToolbox.DesktopApp.Core.Registries;
using MalwareToolbox.DesktopApp.Core.WindowFiles;
using MalwareToolbox.DesktopApp.Views;
using MalwareToolbox.DesktopApp.Core.Processes;
using MalwareToolbox.DesktopApp.Core.Utils;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace MalwareToolbox.DesktopApp;

/// <summary>
/// Provides application-specific behavior to supplement the default Application class.
/// </summary>
public partial class App : Application
{
    internal static App Instance { get; private set; }

    internal bool IsRunningAsUwp { get; }
    internal IConfigProvider ConfigProvider { get; }
    internal ThemeHelper ThemeHelper { get; }
    internal ThreadHelper ThreadHelper { get; }
    internal WinFileManager WinFileManager { get; }
    internal RegistrySnapshotManager RegistrySnapshotManager { get; }
    internal ProcessManager ProcessManager { get; }
    internal WindowsManager WindowsManager { get; }
    internal ToolboxNavManager ToolboxNavManager { get; private set; }

    /// <summary>
    /// Initializes the singleton application object.  This is the first line of authored code
    /// executed, and as such is the logical equivalent of main() or WinMain().
    /// </summary>
    public App()
    {
        Instance = this;

        AppDomain.CurrentDomain.ProcessExit += OnProcessExit;

        var helpers = new DesktopBridge.Helpers();
        IsRunningAsUwp = helpers.IsRunningAsUwp();

        ConfigProvider = IsRunningAsUwp ? new AppDataConfigProvider() : new JsonConfigProvider();
        ThemeHelper = new ThemeHelper();
        ThreadHelper = new ThreadHelper();
        WinFileManager = new WinFileManager();
        RegistrySnapshotManager = new RegistrySnapshotManager();
        ProcessManager = new ProcessManager();
        WindowsManager = new WindowsManager();

        ThemeHelper.SetTheme(this);

        InitializeComponent();
    }

    /// <summary>
    /// Invoked when the application is launched normally by the end user.  Other entry points
    /// will be used such as when the application is launched to open a specific file.
    /// </summary>
    /// <param name="args">Details about the launch request and process.</param>
    protected override void OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs args)
    {
        var mainWindow = new MainWindow();
        ToolboxNavManager = new ToolboxNavManager(mainWindow.ContentFrame, mainWindow.AppNavigationView.MenuItems);
        WindowsManager.ActivateWindow(mainWindow);
    }

    private void OnProcessExit(object sender, EventArgs e)
    {
        WinFileManager.CloseFile();
        ProcessManager.StopProcessCapture();
        ConfigProvider.Save();
    }
}
