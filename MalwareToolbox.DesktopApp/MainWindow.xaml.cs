using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Controls.Primitives;
using Microsoft.UI.Xaml.Data;
using Microsoft.UI.Xaml.Input;
using Microsoft.UI.Xaml.Media;
using Microsoft.UI.Xaml.Navigation;
using Microsoft.UI.Composition.SystemBackdrops;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.Storage;
using Windows.Storage.Pickers;
using MalwareToolbox.DesktopApp.Core;
using MalwareToolbox.DesktopApp.Core.Utils;
using WinRT;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace MalwareToolbox.DesktopApp;

/// <summary>
/// An empty window that can be used on its own or navigated to within a Frame.
/// </summary>
public sealed partial class MainWindow : Window
{
    private WindowsSystemDispatcherQueueHelper _wsdqHelper; // See separate sample below for implementation
    private MicaController _micaController;
    private SystemBackdropConfiguration _configurationSource;

    internal WinFileManager FileManager { get; }
    
    public MainWindow()
    {
        InitializeComponent();
        
        TrySetMicaBackdrop();
        
        ExtendsContentIntoTitleBar = true;
        SetTitleBar(AppTitleBar);

        FileManager = new WinFileManager();
        FileManager.WinFileOpened += FileManager_WinFileOpened;
        FileManager.WinFileClosing += FileManager_WinFileClosing;
    }
    
    private bool TrySetMicaBackdrop()
    {
        if (MicaController.IsSupported())
        {
            _wsdqHelper = new WindowsSystemDispatcherQueueHelper();
            _wsdqHelper.EnsureWindowsSystemDispatcherQueueController();

            // Hooking up the policy object
            _configurationSource = new SystemBackdropConfiguration();
            this.Activated += MicaMainWindow_OnActivated;
            this.Closed += MicaMainWindow_OnClosed;
            ((FrameworkElement)this.Content).ActualThemeChanged += MainWindow_OnThemeChanged;

            // Initial configuration state.
            _configurationSource.IsInputActive = true;
            SetConfigurationSourceTheme();

            _micaController = new MicaController();

            // Enable the system backdrop.
            // Note: Be sure to have "using WinRT;" to support the Window.As<...>() call.
            _micaController.AddSystemBackdropTarget(this.As<Microsoft.UI.Composition.ICompositionSupportsSystemBackdrop>());
            _micaController.SetSystemBackdropConfiguration(_configurationSource);
            return true; // succeeded
        }

        return false; // Mica is not supported on this system
    }

    private void MicaMainWindow_OnActivated(object sender, WindowActivatedEventArgs args)
    {
        _configurationSource.IsInputActive = args.WindowActivationState != WindowActivationState.Deactivated;
    }

    private void MicaMainWindow_OnClosed(object sender, WindowEventArgs args)
    {
        // Make sure any Mica/Acrylic controller is disposed so it doesn't try to
        // use this closed window.
        if (_micaController != null)
        {
            _micaController.Dispose();
            _micaController = null;
        }
        this.Activated -= MicaMainWindow_OnActivated;
        _configurationSource = null;
    }

    private void MainWindow_OnThemeChanged(FrameworkElement sender, object args)
    {
        if (_configurationSource != null)
        {
            SetConfigurationSourceTheme();
        }
    }

    private void SetConfigurationSourceTheme()
    {
        switch (((FrameworkElement)this.Content).ActualTheme)
        {
            case ElementTheme.Dark:    _configurationSource.Theme = SystemBackdropTheme.Dark; break;
            case ElementTheme.Light:   _configurationSource.Theme = SystemBackdropTheme.Light; break;
            case ElementTheme.Default: _configurationSource.Theme = SystemBackdropTheme.Default; break;
        }
    }

    private void AppNavigationView_OnSelectionChangedNavigationView_SelectionChanged(NavigationView sender, NavigationViewSelectionChangedEventArgs args)
    {
        if (!FileManager.IsFileOpened())
        {
            if (ContentFrame.CurrentSourcePageType == typeof(OpenFile)) return;
            
            sender.Header = "";
            ContentFrame.Navigate(typeof(OpenFile));
            return;
        }
        
        var selectedItem = (NavigationViewItem)args.SelectedItem;
        var pageName = "MalwareToolbox.DesktopApp.Tools." + selectedItem.Tag;
        var pageType = Type.GetType(pageName);
        if (pageType == null) return;

        sender.Header = selectedItem.Content;
        ContentFrame.Navigate(pageType);
    }

    private async void MenuFlyoutItem_FileOpen_OnClick(object sender, RoutedEventArgs e)
    {
        FileOpenPicker openPicker = new FileOpenPicker { ViewMode = PickerViewMode.List };
        openPicker.FileTypeFilter.Add(".exe");
        openPicker.FileTypeFilter.Add(".dll");

        var hwnd = WinRT.Interop.WindowNative.GetWindowHandle(this);
        WinRT.Interop.InitializeWithWindow.Initialize(openPicker, hwnd);

        StorageFile file = await openPicker.PickSingleFileAsync();
        if (file != null)
        {
            FileManager.OpenFile(file);
        }
    }

    private void MenuFlyoutItem_OnClick(object sender, RoutedEventArgs e)
    {
        FileManager.CloseFile();
    }

    private void MainWindow_OnActivated(object sender, WindowActivatedEventArgs args)
    {
        foreach (var recentFile in FileManager.RecentFiles)
        {
            RecentFilesMenu.Items.Add(new MenuFlyoutItem() { Text = recentFile.Name, Tag = recentFile.Path });
        }
        
        if (FileManager.IsFileOpened()) return;
        if (ContentFrame.CurrentSourcePageType == typeof(OpenFile)) return;

        AppNavigationView.Header = "";
        ContentFrame.Navigate(typeof(OpenFile));
    }

    private void FileManager_WinFileOpened(object sender, WinFileOpenedEventArgs args)
    {
        FilePathText.Text = args.WinFile.Path;

        AppNavigationView.SelectedItem ??= AppNavigationView.MenuItems.First();
        var selectedItem = (NavigationViewItem)AppNavigationView.SelectedItem;

        var pageName = "MalwareToolbox.DesktopApp.Tools." + selectedItem.Tag;
        var pageType = Type.GetType(pageName);
        if (pageType == null) return;

        AppNavigationView.Header = selectedItem.Content;
        ContentFrame.Navigate(pageType);
    }

    private void FileManager_WinFileClosing(object sender, WinFileClosingEventArgs args)
    {
        FilePathText.Text = "";
        AppNavigationView.Header = "";
        ContentFrame.Navigate(typeof(OpenFile));
    }
    
    private void MainWindow_OnClosed(object sender, WindowEventArgs args)
    {
        FileManager.CloseFile();
    }
}
