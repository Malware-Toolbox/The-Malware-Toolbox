using System;
using System.Collections.Generic;
using MalwareToolbox.DesktopApp.Core.Utils;
using MalwareToolbox.DesktopApp.Core.WindowFiles;
using MalwareToolbox.DesktopApp.UI;
using MalwareToolbox.DesktopApp.Views;
using Microsoft.UI.Xaml.Controls;

namespace MalwareToolbox.DesktopApp.Core.Navigations;

public class ToolboxNavManager : ToolboxObservableRecipient
{
    private static readonly List<PageMeta> PageMetas = new List<PageMeta>
    {
        new PageMeta(
            "HomePage",
            "Home",
            Symbol.Home,
            "https://github.com/Malware-Toolbox/The-Malware-Toolbox/wiki",
            false,
            new List<PageMeta>()
        ),
        new SeperatorPageMeta(),
        new PageMeta(
            "Categories.StaticAnalysis",
            "Static Analysis",
            Symbol.Remote,
            "https://github.com/Malware-Toolbox/The-Malware-Toolbox/wiki",
            false,
            new List<PageMeta>
            {
                new PageMeta(
                    "Tools.FileInfo",
                    "File Info",
                    Symbol.Preview,
                    "https://github.com/Malware-Toolbox/The-Malware-Toolbox/wiki/File-Info-Usage",
                    true
                ),
                new PageMeta(
                    "Tools.PEUnpacker",
                    "PE Unpacker",
                    Symbol.Copy,
                    "https://github.com/Malware-Toolbox/The-Malware-Toolbox/wiki/PE-Unpacker",
                    true
                ),
                new PageMeta(
                    "Tools.Strings",
                    "Strings",
                    Symbol.AlignLeft,
                    "https://github.com/Malware-Toolbox/The-Malware-Toolbox/wiki/Strings-Analysis",
                    true
                ),
            }
        ),
        new PageMeta(
            "Categories.DynamicAnalysis",
            "Dynamic Analysis",
            Symbol.Shuffle,
            "https://github.com/Malware-Toolbox/The-Malware-Toolbox/wiki",
            false,
            new List<PageMeta>
            {
                new PageMeta(
                    "Tools.ProcessMonitor",
                    "Process Monitor",
                    Symbol.TwoBars,
                    "https://github.com/Malware-Toolbox/The-Malware-Toolbox/wiki/Process-Monitor",
                    true
                ),
                new PageMeta(
                    "Tools.RegShotManager",
                    "Registry Snapshot",
                    Symbol.ViewAll,
                    "https://github.com/Malware-Toolbox/The-Malware-Toolbox/wiki/Registry-Snapshot",
                    true
                ),
                new PageMeta(
                    "Tools.DNSRequestCapture",
                    "DNS Request Captures",
                    Symbol.Globe,
                    "https://github.com/Malware-Toolbox/The-Malware-Toolbox/wiki/DNS-Request-Capture",
                    true
                ),
            }
        ),
        new PageMeta(
            "Categories.Miscellaneous",
            "Miscellaneous",
            Symbol.More,
            "https://github.com/Malware-Toolbox/The-Malware-Toolbox/wiki",
            false,
            new List<PageMeta>()
            {
                new PageMeta(
                    "Tools.VirusTotal",
                    "Virus Total",
                    Symbol.ReportHacked,
                    "https://github.com/Malware-Toolbox/The-Malware-Toolbox/wiki/VirusTotal",
                    true
                ),
            }
        ),
    };

    private readonly Frame _frame;
    private readonly Dictionary<string, NavigationViewItem> _pages;
    private readonly Dictionary<string, PageMeta> _pageMetaMap;
    private readonly WinFileManager _fileManager;

    private bool _alwaysShowHeader = true;
    private NavigationViewItem _selectedMenuItem;

    public bool AlwaysShowHeader
    {
        get => _alwaysShowHeader;
        set => SetProperty(ref _alwaysShowHeader, value);
    }

    public NavigationViewItem SelectedMenuItem
    {
        get => _selectedMenuItem;
        set
        {
            if (SetProperty(ref _selectedMenuItem, value))
            {
                NavigateMenuItem(_selectedMenuItem);
            }
        }
    }

    public NavHeaderStack HeaderStack { get; }

    public ToolboxNavManager(Frame frame)
    {
        _frame = frame;
        _pages = new Dictionary<string, NavigationViewItem>();
        _pageMetaMap = new Dictionary<string, PageMeta>();
        _fileManager = App.Instance.WinFileManager;;
        HeaderStack = new NavHeaderStack();
    }

    public void LoadMenuItems(IList<object> navItems)
    {
        _LoadMenuItems(PageMetas, navItems);
        ((NavigationViewItem)navItems[0]).IsSelected = true;
    }

    private void _LoadMenuItems(List<PageMeta> pageMetas, IList<object> navItems)
    {
        foreach (var pageMeta in pageMetas)
        {
            if (pageMeta is SeperatorPageMeta)
            {
                navItems.Add(new NavigationViewItemSeparator());
                continue;
            }

            var navItem = new NavigationViewItem
            {
                Tag = pageMeta.Id,
                Content = pageMeta.Title,
                Icon = new SymbolIcon(pageMeta.Icon),
            };

            navItems.Add(navItem);
            _pages.Add(pageMeta.Id, navItem);
            _pageMetaMap.Add(pageMeta.Id, pageMeta);

            if (pageMeta.HasChildren())
            {
                _LoadMenuItems(pageMeta.PageMetas, navItem.MenuItems);
                navItem.IsExpanded = true;
            }
        }
    }

    public bool NavigateMenuItem(string menuItemTag)
    {
        return _pages.TryGetValue(menuItemTag, out NavigationViewItem menuItem) && NavigateMenuItem(menuItem);
    }
    
    public bool NavigateMenuItem(NavigationViewItem menuItem)
    {
        SelectedMenuItem = menuItem;
        var pageType = Type.GetType(PageIds.BaseNamespace + menuItem.Tag);
        if (pageType == null)
        {
            return NavigateReplacePage(new NavPage(menuItem.Content as string, typeof(BlankPage)));
        }
        if (!_fileManager.IsFileOpened && typeof(IPageRequireFile).IsAssignableFrom(pageType))
        {
            return NavigateReplacePage(new NavPage(menuItem.Content as string, typeof(OpenFile)));
        }
        return NavigateReplacePage(new NavPage(menuItem.Content as string, pageType));
    }

    public bool NavigateReplacePage(NavPage navPage)
    {
        HeaderStack.Stack.Clear();
        return NavigateAppendPage(navPage);
    }

    public bool NavigateAppendPage(NavPage navPage)
    {
        AlwaysShowHeader = !navPage.Name.Equals(PageIds.HomePage);

        HeaderStack.Stack.Add(navPage);
        return _frame.Navigate(navPage.PageType);
    }

    public bool NavigateBackToPage(NavPage navPage)
    {
        if (navPage == null) return false;

        var index = HeaderStack.Stack.IndexOf(navPage);
        if (index == -1) return false;
        while (HeaderStack.Stack.Count > index + 1)
        {
            HeaderStack.Stack.RemoveAt(HeaderStack.Stack.Count - 1);
            _frame.GoBack();
        }
        return true;
    }

    public PageMeta GetSelectedPageMeta()
    {
        return GetPageMeta(SelectedMenuItem);
    }

    public PageMeta GetPageMeta(NavigationViewItem menuItem)
    {
        return GetPageMeta(menuItem?.Tag as string);
    }

    public PageMeta GetPageMeta(string menuItemTag)
    {
        _pageMetaMap.TryGetValue(menuItemTag ?? string.Empty, out var pageMeta);
        return pageMeta;
    }
}
