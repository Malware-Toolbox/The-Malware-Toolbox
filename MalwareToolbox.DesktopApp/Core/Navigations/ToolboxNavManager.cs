using System;
using System.Collections.Generic;
using MalwareToolbox.DesktopApp.Core.Utils;
using MalwareToolbox.DesktopApp.Core.WindowFiles;
using MalwareToolbox.DesktopApp.UI;
using MalwareToolbox.DesktopApp.Views;
using Microsoft.UI.Xaml.Controls;

namespace MalwareToolbox.DesktopApp.Core.Navigations;

public class ToolboxNavManager : ToolboxObservableRecipient
{
    public static readonly string BaseNamespace = "MalwareToolbox.DesktopApp.Views.";
    public static readonly string HomePage = "Home";

    private readonly Frame _frame;
    private readonly Dictionary<string, NavigationViewItem> _pages;
    private readonly WinFileManager _fileManager;

    private bool _alwaysShowHeader = true;
    private NavigationViewItem _selectedMenuItem;

    public bool AlwaysShowHeader
    {
        get => _alwaysShowHeader;
        set => SetProperty(ref _alwaysShowHeader, value);
    }

    public NavigationViewItem SelectedMenuItem
    {
        get => _selectedMenuItem;
        set
        {
            if (SetProperty(ref _selectedMenuItem, value))
            {
                NavigateMenuItem(_selectedMenuItem);
            }
        }
    }

    public NavHeaderStack HeaderStack { get; }

    public ToolboxNavManager(Frame frame, IList<object> menuItems)
    {
        _frame = frame;
        _pages = new Dictionary<string, NavigationViewItem>();
        _fileManager = App.Instance.WinFileManager;;
        HeaderStack = new NavHeaderStack();

        LoadMenuItems(menuItems);
    }

    private void LoadMenuItems(IList<object> menuItems)
    {
        foreach (object item in menuItems)
        {
            if (item is NavigationViewItem menuItem)
            {
                LoadMenuItems(menuItem.MenuItems);
                _pages.Add(menuItem.Tag as string ?? string.Empty, menuItem);
            }
        }
    }

    public bool NavigateMenuItem(string menuItemTag)
    {
        return _pages.TryGetValue(menuItemTag, out NavigationViewItem menuItem) && NavigateMenuItem(menuItem);
    }
    
    public bool NavigateMenuItem(NavigationViewItem menuItem)
    {
        SelectedMenuItem = menuItem;
        var pageType = Type.GetType(BaseNamespace + menuItem.Tag);
        if (pageType == null)
        {
            return NavigateReplacePage(new NavPage(menuItem.Content as string, typeof(BlankPage)));
        }
        if (!_fileManager.IsFileOpened && typeof(IPageRequireFile).IsAssignableFrom(pageType))
        {
            return NavigateReplacePage(new NavPage(menuItem.Content as string, typeof(OpenFile)));
        }
        return NavigateReplacePage(new NavPage(menuItem.Content as string, pageType));
    }

    public bool NavigateReplacePage(NavPage navPage)
    {
        HeaderStack.Stack.Clear();
        return NavigateAppendPage(navPage);
    }

    public bool NavigateAppendPage(NavPage navPage)
    {
        AlwaysShowHeader = !navPage.Name.Equals(HomePage);

        HeaderStack.Stack.Add(navPage);
        return _frame.Navigate(navPage.PageType);
    }

    public bool NavigateBackToPage(NavPage navPage)
    {
        if (navPage == null) return false;

        var index = HeaderStack.Stack.IndexOf(navPage);
        if (index == -1) return false;
        while (HeaderStack.Stack.Count > index + 1)
        {
            HeaderStack.Stack.RemoveAt(HeaderStack.Stack.Count - 1);
            _frame.GoBack();
        }
        return true;
    }
}
