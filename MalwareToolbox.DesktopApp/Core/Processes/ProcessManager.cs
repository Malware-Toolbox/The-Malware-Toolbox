using MalwareToolbox.LibraryC.ProcessAnalysis;
using System;
using System.Collections.Generic;
using System.Threading;
using MalwareToolbox.DesktopApp.UI.Items;

namespace MalwareToolbox.DesktopApp.Core.Processes;

public class ProcessManager
{
    private readonly ProcessProvider _processProvider;

    private Timer _processTimer;

    public event EventHandler<ProcessUpdateEventArgs> ProcessUpdate;

    public ProcessManager()
    {
        _processProvider = new ProcessProvider(() => new ObservableProcess(), () => new ObservableThread());
    }

    public IProcess GetProcessById(uint processId)
    {
        return _processProvider.GetProcess(processId);
    }

    public void StartProcessCapture()
    {
        if (_processTimer != null) return;
        _processTimer = new Timer(FetchProcesses, null, 0, 1000); //TODO customizable rate
    }

    public void StopProcessCapture()
    {
        if (_processTimer == null) return;
        _processTimer.Dispose();
        _processTimer = null;
    }

    private void FetchProcesses(object state)
    {
        var processes = _processProvider.GetProcesses();
        ProcessUpdate?.Invoke(this, new ProcessUpdateEventArgs(processes, true));
    }
}
