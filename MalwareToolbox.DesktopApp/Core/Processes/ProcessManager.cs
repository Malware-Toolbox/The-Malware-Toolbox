using MalwareToolbox.LibraryC.ProcessAnalysis;
using System;
using System.Collections.Generic;
using System.Threading;
using MalwareToolbox.DesktopApp.UI.Items;

namespace MalwareToolbox.DesktopApp.Core.Processes;

public class ProcessManager
{
    private readonly ProcessProvider _processProvider;

    private Timer _processTimer;
    private Dictionary<uint, IProcess> _processesCache;

    public event EventHandler<ProcessUpdateEventArgs> ProcessUpdate;

    public ProcessManager()
    {
        _processProvider = new ProcessProvider(() => new ObservableProcess());
    }

    public IProcess GetProcessById(uint processId)
    {
        return _processesCache.TryGetValue(processId, out IProcess process) ? process : null;
    }

    public void StartProcessCapture()
    {
        if (_processTimer != null) StopProcessCapture();
        _processTimer = new Timer(FetchProcesses, null, 0, 1000); //TODO customizable rate
    }

    public void StopProcessCapture()
    {
        if (_processTimer == null) return;
        _processTimer.Dispose();
        _processTimer = null;
    }

    private void FetchProcesses(object state)
    {
        if (_processesCache == null)
        {
            _processesCache = _processProvider.GetProcesses();
            ProcessUpdate?.Invoke(this, new ProcessUpdateEventArgs(_processesCache));
            return;
        }

        _processProvider.UpdateProcesses(_processesCache);
        ProcessUpdate?.Invoke(this, new ProcessUpdateEventArgs(_processesCache, true));
    }
}
