using System;
using System.Collections.Generic;
using CommunityToolkit.Mvvm.ComponentModel;
using MalwareToolbox.DesktopApp.Core.Utils;
using MalwareToolbox.LibraryC.ProcessAnalysis;

namespace MalwareToolbox.DesktopApp.Core.Processes;

public class ObservableProcess : ToolboxObservableRecipient, IProcess
{
    private uint _processId;
    private string _processName;
    private string _processPath;
    private DateTime _creationTime;
    private DateTime _exitTime;
    private TimeSpan _userTime;
    private TimeSpan _kernelTime;
    private int _priority;
    private string _description;
    private uint _handlesCount;
    private uint _gdiHandles;
    private uint _userHandles;
    private ulong _privateUsage;
    private Dictionary<uint, IThread> _threads;

    public uint ProcessID
    {
        get => _processId;
        set => SetPropertyUIThread(ref _processId, value);
    }

    public string ProcessName
    {
        get => _processName;
        set => SetPropertyUIThread(ref _processName, value);
    }

    public string ProcessPath
    {
        get => _processPath;
        set => SetPropertyUIThread(ref _processPath, value);
    }

    public TimeSpan UserTime
    {
        get => _userTime;
        set => SetPropertyUIThread(ref _userTime, value);
    }

    public TimeSpan KernelTime
    {
        get => _kernelTime;
        set => SetPropertyUIThread(ref _kernelTime, value);
    }

    public DateTime ExitTime
    {
        get => _exitTime;
        set => SetPropertyUIThread(ref _exitTime, value);
    }

    public DateTime CreationTime
    {
        get => _creationTime;
        set => SetPropertyUIThread(ref _creationTime, value);
    }

    public int Priority
    {
        get => _priority;
        set => SetPropertyUIThread(ref _priority, value);
    }

    public string Description
    {
        get => _description;
        set => SetPropertyUIThread(ref _description, value);
    }

    public uint UserHandles
    {
        get => _userHandles;
        set => SetPropertyUIThread(ref _userHandles, value);
    }

    public uint GDIHandles
    {
        get => _gdiHandles;
        set => SetPropertyUIThread(ref _gdiHandles, value);
    }

    public uint HandlesCount
    {
        get => _handlesCount;
        set => SetPropertyUIThread(ref _handlesCount, value);
    }
    public ulong PrivateUsage
    {
        get => _privateUsage;
        set => SetPropertyUIThread(ref _privateUsage, value);
    }

    public Dictionary<uint, IThread> Threads
    {
        get => _threads;
        set => SetPropertyUIThread(ref _threads, value);
    }

    public bool DoThreadsLoad { get; set; }
}
