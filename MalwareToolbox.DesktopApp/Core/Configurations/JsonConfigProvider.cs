using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;

namespace MalwareToolbox.DesktopApp.Core.Configurations;

public class JsonConfigProvider : IConfigProvider
{
    public static readonly string ConfigFileName = "config.json";

    private Dictionary<string, object> _configData;

    public JsonConfigProvider()
    {
        LoadJsonData();
    }

    private void LoadJsonData()
    {
        _configData = File.Exists(ConfigFileName) 
            ? JsonConvert.DeserializeObject<Dictionary<string, object>>(File.ReadAllText("config.json"))
            : new Dictionary<string, object>();
    }

    public T GetConfig<T>(Config<T> config)
    {
        if (_configData.ContainsKey(config.Key))
        {
            return config.ConfigHandler.ToConfigData<T>(config, _configData[config.Key]);
        }
        return config.DefaultValue;
    }

    public void SetConfig<T>(Config<T> config, T value)
    {
        _configData[config.Key] = config.ConfigHandler.ToSettingsData(config, value);

        config.InvokeEvent(value);
    }

    public void ResetConfig<T>(Config<T> config)
    {
        _configData.Remove(config.Key);
    }

    public void ResetAllConfig()
    {
        _configData.Clear();
    }

    public async void Save()
    {
        await File.WriteAllTextAsync(ConfigFileName, JsonConvert.SerializeObject(_configData));
    }
}
