using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Windows.Storage;
using Windows.Storage.Pickers;
using CommunityToolkit.Mvvm.ComponentModel;
using MalwareToolbox.DesktopApp.Core.Configurations;
using MalwareToolbox.LibraryC.Utils;
using Microsoft.UI.Xaml;

namespace MalwareToolbox.DesktopApp.Core.WindowFiles;

public class WinFileManager : ObservableObject
{
    private readonly IConfigProvider _configProvider;

    public event EventHandler<WinFileOpenedEventArgs> WinFileOpened;
    public event EventHandler<WinFileClosingEventArgs> WinFileClosing;
    public event EventHandler<WinFileClosedEventArgs> WinFileClosed;

    public List<string> RecentFiles { get; private set; }
    public WinFile WinFile { get; private set; }

    public WinFileManager()
    {
        _configProvider = App.Instance.ConfigProvider;
        LoadRecentFiles();
    }

    private void LoadRecentFiles()
    {
        RecentFiles = new List<string>();

        var recentFileNames = _configProvider.GetConfig(Configs.WinFileRecentFiles);
        if (recentFileNames == null) return;
        RecentFiles.AddRange(recentFileNames);
        if (RecentFiles.Count > 10)
        {
            RecentFiles = RecentFiles.GetRange(0, 10);
        }
    }

    private void AddRecentFile(string filePath)
    {
        if (RecentFiles.Contains(filePath))
        {
            RecentFiles.Remove(filePath);
        }
        RecentFiles.Insert(0, filePath);
        _configProvider.SetConfig(Configs.WinFileRecentFiles, RecentFiles);
        //TODO add max items in recent file
    }

    public async Task<bool> OpenFromFilePicker()
    {
        var openPicker = new FileOpenPicker { ViewMode = PickerViewMode.List };
        openPicker.FileTypeFilter.Add(".exe");
        openPicker.FileTypeFilter.Add(".dll");
        openPicker.FileTypeFilter.Add("*");

        var hwnd = WinRT.Interop.WindowNative.GetWindowHandle(App.Instance.WindowsManager.MainWindow);
        WinRT.Interop.InitializeWithWindow.Initialize(openPicker, hwnd);

        var file = await openPicker.PickSingleFileAsync();
        if (file == null)
        {
            return false;
        }

        return await OpenFile(file);
    }
    
    public async Task<bool> OpenFile(StorageFile file)
    {
        return await OpenFile(file.Path);
    }

    public async Task<bool> OpenFile(string filePath)
    {
        if (WinFile != null && !CloseFile()) return false;

        WinFile = new WinFile(filePath);
        var result = await Task.Run(WinFile.Load);
        if (!result) return false;

        WinFileOpened?.Invoke(this, new WinFileOpenedEventArgs(filePath, WinFile));
        AddRecentFile(filePath);
        return true;
    }

    public bool CloseFile()
    {
        if (WinFile == null) return false;

        WinFileClosing?.Invoke(this, new WinFileClosingEventArgs(WinFile.Path, WinFile));

        if (!WinFile.Unload()) return false;
        WinFile = null;

        WinFileClosed?.Invoke(this, new WinFileClosedEventArgs());
        return true;
    }

    public bool IsFileOpened()
    {
        return WinFile is { Loaded: true };
    }
}
