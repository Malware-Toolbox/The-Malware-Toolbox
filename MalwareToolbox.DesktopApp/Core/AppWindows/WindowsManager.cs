using System;
using System.Collections.Generic;
using System.Drawing;
using Windows.Graphics;
using MalwareToolbox.DesktopApp.Core.Configurations;
using MalwareToolbox.DesktopApp.Core.Utils;
using Microsoft.UI;
using Microsoft.UI.Windowing;
using Microsoft.UI.Xaml;

namespace MalwareToolbox.DesktopApp.Core.AppWindows;

public class WindowsManager
{
    private readonly ThemeHelper _themeHelper;
    private readonly List<Window> _childWindows;
    
    public Window MainWindow { get; private set; }

    public WindowsManager()
    {
        _themeHelper = App.Instance.ThemeHelper;
        _childWindows = new List<Window>();

        Configs.ApplicationTheme.ConfigChanged += OnApplicationThemeChanged;
    }

    public void ActivateWindow(Window window, SizeInt32 size)
    {
        IntPtr hWnd = WinRT.Interop.WindowNative.GetWindowHandle(window);
        WindowId windowId = Win32Interop.GetWindowIdFromWindow(hWnd);
        AppWindow appWindow = AppWindow.GetFromWindowId(windowId);
        appWindow.Resize(size);
        
        ActivateWindow(window);
    }

    public void ActivateWindow(Window window)
    {
        if (MainWindow == null)
        {
            MainWindow = window;
            MainWindow.Closed += MainWindow_Closed;
        }
        else
        {
            _childWindows.Add(window);
        }

        _themeHelper.SetTheme(window);
        window.Activate();
    }
    
    private void OnApplicationThemeChanged(object sender, ConfigChangedEventArgs<ElementTheme> e)
    {
        _themeHelper.SetTheme(MainWindow);
        _childWindows.ForEach(_themeHelper.SetTheme);
    }

    private void MainWindow_Closed(object sender, WindowEventArgs args)
    {
        // Close the rest of the windows
        foreach (var window in _childWindows)
        {
            window.Close();
        }
    }
}
