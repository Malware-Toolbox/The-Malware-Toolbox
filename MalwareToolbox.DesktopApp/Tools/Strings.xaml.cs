using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Controls.Primitives;
using Microsoft.UI.Xaml.Data;
using Microsoft.UI.Xaml.Input;
using Microsoft.UI.Xaml.Media;
using Microsoft.UI.Xaml.Navigation;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Threading.Tasks;
using Windows.Foundation;
using Windows.Foundation.Collections;
using MalwareToolbox.LibraryC.Utils;
using MalwareToolbox.LibraryC.Strings;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace MalwareToolbox.DesktopApp.Tools;

/// <summary>
/// An empty page that can be used on its own or navigated to within a Frame.
/// </summary>
public sealed partial class Strings : Page
{
    private LibraryC.Utils.File _file;

    public Strings()
    {
        InitializeComponent();
    }

    public async Task<ObservableCollection<StringsList>> GetStringsAsync()
    {
        return await Task.Run(() =>
        {
            var observableCollection = new ObservableCollection<StringsList>();
            var strings = new StringAnalyser(_file);
            StringCategoriser categoriser = new StringCategoriser();
            var stringsList = strings.GenerateStrings(4, 1024);
            foreach (var keyValuePair in categoriser.CatergoriseStrings(stringsList))
            {
                observableCollection.Add(new StringsList(keyValuePair.Value) { Key = keyValuePair.Key });
            }
            return observableCollection;
        });
    }

    protected override async void OnNavigatedTo(NavigationEventArgs e)
    {
        var window = (Application.Current as App)?.Window as MainWindow;

        if (_file == null && window.FilePath != null)
        {
            _file = new LibraryC.Utils.File(window.FilePath);
            _file.Load();
        }

        if (_file is { Loaded: true })
        {
            StringsCollectionView.Source = await GetStringsAsync();
        }
    }

    protected override void OnNavigatedFrom(NavigationEventArgs e)
    {
        if (_file != null)
        {
            _file.Unload();
            _file = null;
        }
    }
}

public class StringsList : List<object>
{
    public StringsList(IEnumerable<object> items) : base(items)
    {
    }
    public object Key { get; set; }
}
