using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Controls.Primitives;
using Microsoft.UI.Xaml.Data;
using Microsoft.UI.Xaml.Input;
using Microsoft.UI.Xaml.Media;
using Microsoft.UI.Xaml.Navigation;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Threading.Tasks;
using Windows.Foundation;
using Windows.Foundation.Collections;
using MalwareToolbox.DesktopApp.Core;
using MalwareToolbox.DesktopApp.Utils;
using MalwareToolbox.LibraryC.Utils;
using MalwareToolbox.LibraryC.Strings;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace MalwareToolbox.DesktopApp.Tools;

/// <summary>
/// An empty page that can be used on its own or navigated to within a Frame.
/// </summary>
public sealed partial class Strings : Page
{
    private readonly WinFileManager _fileManager;
    private StringAnalyser _stringAnalyser;
    private StringFilter _stringFilter;
    private bool _stringsLoaded;

    public Strings()
    {
        InitializeComponent();
        _fileManager = (Application.Current as App)!.MainWindow.FileManager;
        _fileManager.WinFileClosing += FileManager_WinFileClosing;
        _stringFilter = new StringFilter(4, 1024, null);
    }

    protected override void OnNavigatedTo(NavigationEventArgs e)
    {
        _fileManager.WinFileOpened += FileManager_WinFileOpened;
        InitStrings();
    }

    protected override void OnNavigatedFrom(NavigationEventArgs e)
    {
        _fileManager.WinFileOpened -= FileManager_WinFileOpened;
    }

    private void FileManager_WinFileOpened(object sender, WinFileOpenedEventArgs args)
    {
        InitStrings();
    }

    private void FileManager_WinFileClosing(object sender, WinFileClosingEventArgs args)
    {
        StringsCollectionView.Source = null;
        _stringAnalyser = null;
        _stringsLoaded = false;
    }

    private void InitStrings()
    {
        if (!_stringsLoaded && _fileManager.IsFileOpened())
        {
            _stringAnalyser = new StringAnalyser(_fileManager.WinFile);
            LoadStringsAsync();
            _stringsLoaded = true;
        }
        else
        {
            //TODO Dialog file not loaded
        }
    }

    private async void LoadStringsAsync()
    {
        StringsCollectionView.Source = await Task.Run(() =>
        {
            var observableCollection = new ObservableCollection<GroupedList>();
            foreach (var keyValuePair in _stringAnalyser.GetStrings(_stringFilter))
            {
                observableCollection.Add(new GroupedList(keyValuePair.Value) { Key = keyValuePair.Key });
            }
            return observableCollection;
        });
    }

    private void AutoSuggestBox_OnQuerySubmitted(AutoSuggestBox sender, AutoSuggestBoxQuerySubmittedEventArgs args)
    {
        _stringFilter.Search = args.QueryText;
        LoadStringsAsync();
    }

    private void FlyoutBase_OnClosing(FlyoutBase sender, FlyoutBaseClosingEventArgs args)
    {
        _stringFilter.MinLength = (int)MinLengthNumberBox.Value;
        _stringFilter.MaxLength = (int)MaxLengthNumberBox.Value;
        LoadStringsAsync();
    }
}
