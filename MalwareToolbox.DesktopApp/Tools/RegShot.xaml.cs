using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Controls.Primitives;
using Microsoft.UI.Xaml.Data;
using Microsoft.UI.Xaml.Input;
using Microsoft.UI.Xaml.Media;
using Microsoft.UI.Xaml.Navigation;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Threading.Tasks;
using Windows.Foundation;
using Windows.Foundation.Collections;
using ABI.Windows.UI;
using MalwareToolbox.LibraryC.RegShot;
using Microsoft.UI;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace MalwareToolbox.DesktopApp.Tools
{
    /// <summary>
    /// An empty page that can be used on its own or navigated to within a Frame.
    /// </summary>
    public sealed partial class RegShot : Page
    {
        private readonly LibraryC.RegShot.RegShot _regshot;
        private RegistryKey _snapshot1;
        private RegistryKey _snapshot2;

        public RegShot()
        {
            InitializeComponent();
            _regshot = new LibraryC.RegShot.RegShot();
        }

        private async void Snapshot1_OnClick(object sender, RoutedEventArgs e)
        {
            _snapshot1 = await Task.Run(() => _regshot.TakeSnapshot());
            RegistryTreeViewNode node = new RegistryTreeViewNode(_snapshot1);
            RegistryTreeView.RootNodes.Add(node);
            PopulateRegistryTreeView(node);
        }

        private async void Snapshot2_OnClick(object sender, RoutedEventArgs e)
        {
            _snapshot2 = await Task.Run(() => _regshot.TakeSnapshot());
            RegistryTreeViewNode node = new RegistryTreeViewNode(_snapshot2);
            RegistryTreeView.RootNodes.Add(node);
            PopulateRegistryTreeView(node);
        }

        private void Compare_OnClick(object sender, RoutedEventArgs e)
        {
            RegistryTreeView.RootNodes.Clear();
            var diff = _regshot.CompareSnapshots(_snapshot1, _snapshot2);
            foreach (var keyDiff in diff)
            {
                RegistryTreeView.RootNodes.Add(new RegistryTreeViewNode(keyDiff.Key, keyDiff.ValuesDiff));
            }
        }

        private void RegistryTreeView_OnExpanding(TreeView sender, TreeViewExpandingEventArgs args)
        {
            var registryTreeViewNode = args.Node as RegistryTreeViewNode;
            PopulateRegistryTreeView(registryTreeViewNode);
        }

        private void RegistryTreeView_OnItemInvoked(TreeView sender, TreeViewItemInvokedEventArgs args)
        {
            var registryTreeViewNode = args.InvokedItem as RegistryTreeViewNode;
            if (registryTreeViewNode != null)
            {
                if (registryTreeViewNode.ValuesDiff != null)
                {
                    RegistryValuesList.ItemTemplate = (DataTemplate)Resources["RegistryValueDiffListViewTemplate"];
                    RegistryValuesList.ItemsSource = registryTreeViewNode.ValuesDiff;
                }
                else
                {
                    RegistryValuesList.ItemTemplate = (DataTemplate)Resources["RegistryValueListViewTemplate"];
                    RegistryValuesList.ItemsSource = registryTreeViewNode.RegistryKey.Values.Values;
                }
            }
        }

        private void PopulateRegistryTreeView(RegistryTreeViewNode node)
        {
            foreach (var subKey in node.RegistryKey.SubKeys.Values.OrderBy(x => x.Name))
            {
                RegistryTreeViewNode subNode = new RegistryTreeViewNode(subKey);
                node.Children.Add(subNode);
            }
        }
    }

    class RegistryTreeViewNode : TreeViewNode
    {
        public RegistryKey RegistryKey { get; }

        public List<RegistryValueDiff> ValuesDiff { get; set; }

        public RegistryTreeViewNode(RegistryKey registryKey, List<RegistryValueDiff> valuesDiff = null)
        {
            RegistryKey = registryKey;
            ValuesDiff = valuesDiff;
            Content = registryKey.Name;
            HasUnrealizedChildren = registryKey.SubKeys.Count > 0;
        }
    }

    class RegistryValueDataTemplateSelector : DataTemplateSelector
    {
        public DataTemplate NormalTemplate { get; set; }

        public DataTemplate DiffTemplate { get; set; }
        
        protected override DataTemplate SelectTemplateCore(object item)
        {
            if (item is RegistryValue)
            {
                return NormalTemplate;
            }
            else if (item is RegistryValueDiff)
            {
                return DiffTemplate;
            }
            else
            {
                return base.SelectTemplateCore(item);
            }
        }
    }

    class ValueDiffColourConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, string language)
        {
            if (value is RegistryValueDiff registryValue)
                switch (registryValue.Type)
                {
                    case DiffType.Added:
                        return new SolidColorBrush(Colors.DarkGreen);
                    case DiffType.Deleted:
                        return new SolidColorBrush(Colors.DarkRed);
                    case DiffType.Modified:
                        return new SolidColorBrush(Colors.DarkOrange);
                    default:
                        return Application.Current.Resources["ButtonBackground"] as Brush;
                }
            return null;
        }

        public object ConvertBack(object value, Type targetType, object parameter, string language)
        {
            // ConvertBack is not implemented for a OneWay binding.
            throw new NotImplementedException();
        }
    }
}
