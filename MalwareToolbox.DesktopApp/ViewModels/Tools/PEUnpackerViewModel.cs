using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Threading.Tasks;
using Windows.Storage.Pickers;
using MalwareToolbox.DesktopApp.Core.Configurations;
using MalwareToolbox.DesktopApp.Core.WindowFiles;
using MalwareToolbox.LibraryC.Executables;
using MalwareToolbox.LibraryC.Unpackers;
using Microsoft.UI.Xaml;

namespace MalwareToolbox.DesktopApp.ViewModels.Tools;

public class PEUnpackerViewModel : ToolboxViewModel
{
    public static readonly string DefaultDatabasePath = @"Assets\Data\userdb.txt";

    private PackerDatabase _packerDb;
    private bool _initialised;

    private bool _loading;
    private Visibility _noResultVisibility;

    public bool Loading
    {
        get => _loading;
        set => SetProperty(ref _loading, value);
    }

    public string DatabasePath
    {
        get => ConfigProvider.GetConfig(Configs.PEUnpackerDatabasePath);
        set => SetProperty(Configs.PEUnpackerDatabasePath, value);
    }

    public ObservableCollection<string> SignaturesCollection { get; }

    public Visibility NoResultVisibility
    {
        get => _noResultVisibility;
        set => SetProperty(ref _noResultVisibility, value);
    }

    public PEUnpackerViewModel()
    {
        SignaturesCollection = new ObservableCollection<string>();
        FileManager.WinFileClosed += WinFileManager_WinFileClosed;
    }

    public async void InitPeid()
    {
        if (_initialised) return;
        
        if (_packerDb == null)
        {
            string dbPath;

            if (DatabasePath.Equals("Built-In"))
            {
                dbPath = App.Instance.IsRunningAsUwp
                    ? (await Windows.ApplicationModel.Package.Current.InstalledLocation.GetFileAsync(DefaultDatabasePath)).Path
                    : Path.Join(Directory.GetCurrentDirectory(), DefaultDatabasePath);
            }
            else
            {
                dbPath = DatabasePath;
            }

            _packerDb = new PackerDatabase(dbPath);
            if (!_packerDb.Load())
            {
                return;
            }
        }

        _initialised = true;
        await DetectPacker();
    }

    public async Task DetectPacker()
    {
        if (_packerDb == null || !_packerDb.Loaded) return;

        Loading = true;
        NoResultVisibility = Visibility.Collapsed;
        SignaturesCollection.Clear();
        
        var signatures = await Task.Run(() =>
        {
            var pe = new PE(FileManager.WinFile);
            if (!pe.LoadHeaders())
            {
                Console.WriteLine("Failed to load PE");
                return null;
            }
            var result = _packerDb.ScanPE(pe, ScanMode.EpOnly);
            pe.Dispose();

            return result;
        });

        if (signatures != null)
        {
            foreach (var signature in signatures)
            {
                SignaturesCollection.Add(signature.Tool);
            }
        }

        Loading = false;
        if (SignaturesCollection.Count <= 0)
        {
            NoResultVisibility = Visibility.Visible;
        }
    }

    public async void SelectDatabaseFile()
    {
        var openPicker = new FileOpenPicker { ViewMode = PickerViewMode.List };
        openPicker.FileTypeFilter.Add(".txt");
        openPicker.FileTypeFilter.Add("*");

        var hwnd = WinRT.Interop.WindowNative.GetWindowHandle(App.Instance.WindowsManager.MainWindow);
        WinRT.Interop.InitializeWithWindow.Initialize(openPicker, hwnd);

        var file = await openPicker.PickSingleFileAsync();
        if (file == null) return;

        DatabasePath = file.Path;
    }

    private void WinFileManager_WinFileClosed(object sender, WinFileClosedEventArgs e)
    {
        _initialised = false;
        SignaturesCollection.Clear();
    }    
}
