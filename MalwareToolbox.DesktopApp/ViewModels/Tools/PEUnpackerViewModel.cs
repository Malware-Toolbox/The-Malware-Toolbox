using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using Windows.Security.Authentication.Identity.Provider;
using MalwareToolbox.DesktopApp.Core.WindowFiles;
using MalwareToolbox.LibraryC.Executables;
using MalwareToolbox.LibraryC.Unpackers;

namespace MalwareToolbox.DesktopApp.ViewModels.Tools;

public class PEUnpackerViewModel : ToolboxViewModel
{
    private PackerDatabase _packerDb;
    private bool _initialised;

    private bool _loading;

    public bool Loading
    {
        get => _loading;
        set => SetProperty(ref _loading, value);
    }

    public ObservableCollection<string> SignaturesCollection { get; }

    public PEUnpackerViewModel()
    {
        SignaturesCollection = new ObservableCollection<string>();
        FileManager.WinFileClosed += WinFileManager_WinFileClosed;
    }

    public async Task InitPeid()
    {
        if (_packerDb == null)
        {
            var dbFile = await Windows.ApplicationModel.Package.Current.InstalledLocation.GetFileAsync(@"Assets\userdb.txt");
            _packerDb = new PackerDatabase(dbFile.Path);
            _packerDb.Load();
        }

        if (!_initialised)
        {
            _initialised = true;
            await DetectPacker();
        }
    }

    public async Task DetectPacker()
    {
        Loading = true;
        SignaturesCollection.Clear();
        
        var signatures = await Task.Run(() =>
        {
            var pe = new PE(FileManager.WinFile);
            if (!pe.LoadHeaders())
            {
                Console.WriteLine("Failed to load PE");
                return null;
            }
            var result = _packerDb.ScanPE(pe, ScanMode.EpOnly);
            pe.Dispose();

            return result;
        });

        foreach (var signature in signatures)
        {
            SignaturesCollection.Add(signature.Tool);
        }

        Loading = false;
    }

    private void WinFileManager_WinFileClosed(object sender, WinFileClosedEventArgs e)
    {
        _initialised = false;
        SignaturesCollection.Clear();
    }    
}
