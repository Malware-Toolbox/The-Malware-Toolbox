using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using Windows.Security.Authentication.Identity.Provider;
using MalwareToolbox.LibraryC.Executables;
using MalwareToolbox.LibraryC.Unpackers;

namespace MalwareToolbox.DesktopApp.ViewModels.Tools;

public class PEUnpackerViewModel : ToolboxViewModel
{
    private PackerDatabase _packerDb;

    private bool _loading;

    public bool Loading
    {
        get => _loading;
        set => SetProperty(ref _loading, value);
    }

    public ObservableCollection<string> SignaturesCollection { get; }

    public PEUnpackerViewModel()
    {
        _packerDb = new PackerDatabase(@"C:\Users\wben1\Downloads\userdb.txt");
        _packerDb.Load();
        SignaturesCollection = new ObservableCollection<string>();
    }

    public async void DetectPacker()
    {
        Loading = true;
        SignaturesCollection.Clear();
        
        var signatures = await Task.Run(() =>
        {
            var pe = new PE(FileManager.WinFile);
            if (!pe.LoadHeaders())
            {
                Console.WriteLine("Failed to load PE");
                return null;
            }
            var result = _packerDb.ScanPE(pe, ScanMode.EpOnly);
            pe.Dispose();

            return result;
        });

        foreach (var signature in signatures)
        {
            SignaturesCollection.Add(signature.Tool);
        }

        Loading = false;
    }
}
