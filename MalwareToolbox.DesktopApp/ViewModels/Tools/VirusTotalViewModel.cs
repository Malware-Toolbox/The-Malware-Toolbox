using CommunityToolkit.Mvvm.ComponentModel;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using MalwareToolbox.DesktopApp.Core.Configurations;
using MalwareToolbox.DesktopApp.Core.Utils;
using MalwareToolbox.DesktopApp.Core.WindowFiles;
using MalwareToolbox.DesktopApp.UI.Notifications;
using MalwareToolbox.Library.ImportExports;
using MalwareToolbox.Library.VirusTotalAPI;
using Microsoft.UI.Xaml;
using Newtonsoft.Json;

namespace MalwareToolbox.DesktopApp.ViewModels.Tools;

public class VirusTotalViewModel : ToolboxViewModel
{
    private readonly ImportExportFactory<Dictionary<string, List<string>>> _fileInfoFactory;
    private bool _initialised;
    private ObservableCollection<GroupedList> _sectionListCollection = new ObservableCollection<GroupedList>();
    private ObservableCollection<GroupedList> _importsListCollection = new ObservableCollection<GroupedList>();
    private ObservableCollection<GroupedList> _filePropertiesListCollection = new ObservableCollection<GroupedList>();
    private ObservableCollection<GroupedList> _namesListCollection = new ObservableCollection<GroupedList>();

    public ObservableCollection<GroupedList> SectionListCollection
    {
        get => _sectionListCollection;
        set => SetProperty(ref _sectionListCollection, value);
    }
    public ObservableCollection<GroupedList> ImportListCollection
    {
        get => _importsListCollection;
        set => SetProperty(ref _importsListCollection, value);
    }
    public ObservableCollection<GroupedList> FilePropertiesListCollection
    {
        get => _filePropertiesListCollection;
        set => SetProperty(ref _filePropertiesListCollection, value);
    }
    public ObservableCollection<GroupedList> NamesListCollection
    {
        get => _namesListCollection;
        set => SetProperty(ref _namesListCollection, value);
    }

    public async Task LoadVirusTotalDetailsAsync(string apiKey, string hash)
    {
        var virusTotal = new VirusTotalAPI();
        Result? result = await virusTotal.GetDetailsAsync(apiKey, hash);
        if (result == null)
        {
            Console.WriteLine("Failed to get details");
            return;
        }

        // Details
        _filePropertiesListCollection.Clear();
        var PropertiesList = new GroupedList(new List<string>
        {
            "MD5: " + result.data.attributes.md5,
            "SHA-1: " + result.data.attributes.sha1,
            "SHA-256: " + result.data.attributes.sha256,
            "Vhash: " + result.data.attributes.vhash,
            "Authentihash: " + result.data.attributes.authentihash,
            "File Type: " + result.data.attributes.type_description,
            "Magic: " + result.data.attributes.magic,
            "Creation Date: " + result.data.attributes.creation_date,
            "Last Modified: " + result.data.attributes.last_modification_date,
            "File Size (bytes): " + result.data.attributes.size,
        });
        _filePropertiesListCollection.Add(PropertiesList);

        // Names
        _namesListCollection.Clear();
        var NamesList = new GroupedList(new List<string>{});
        foreach (var function in result.data.attributes.names)
        {
            NamesList.Add(function);
        }
        _namesListCollection.Add(NamesList);
       

        _sectionListCollection.Clear();
        foreach (var section in result.data.attributes.pe_info.sections)
        {
            var SectionsList = new GroupedList(new List<string>
            {
                "Flags: " + section.flags,
                "Virtual Address: : " + section.virtual_address,
                "Virtual Size: " + section.virtual_size,
                "Raw Size: " + section.raw_size,
                "Entropy: " + section.entropy,
                "MD5: " + section.md5,
                "Chi2: " + section.chi2
            });

            SectionsList.Key = section.name;
            _sectionListCollection.Add(SectionsList);
        }

        // Imports
        _importsListCollection.Clear();
        var ImportsList = new GroupedList(new List<string> { });
        foreach (var imports in result.data.attributes.pe_info.import_list)
        {
            foreach (var function in imports.imported_functions)
            {
                ImportsList.Add(function);
            }

            ImportsList.Key = imports.library_name;
            _importsListCollection.Add(ImportsList);
        }
    }
}
