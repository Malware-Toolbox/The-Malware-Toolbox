using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using Windows.Storage.Pickers;
using MalwareToolbox.DesktopApp.Core.Configurations;
using MalwareToolbox.DesktopApp.Core.Navigations;
using MalwareToolbox.DesktopApp.Core.Registries;
using MalwareToolbox.DesktopApp.UI.Items;
using MalwareToolbox.DesktopApp.UI.Notifications;
using MalwareToolbox.DesktopApp.Views.Tools;
using MalwareToolbox.Library.ImportExports;
using MalwareToolbox.LibraryC.RegShot;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;

namespace MalwareToolbox.DesktopApp.ViewModels.Tools;

public class RegShotManagerViewModel : ToolboxViewModel
{
    private readonly ImportExportFactory<RegistrySnapshot> _registryFactory;
    private readonly RegistryItemFactory _registryItemFactory;

    private bool _snapshotButtonEnabled = true;
    private bool _snapshotLoading;
    private ObservableCollection<RegistrySnapshotItem> _displaySnapshots;
    private ObservableCollection<RegistrySnapshotItem> _displayCompare;
    private RegistrySnapshotItem _displaySnapshotsSelected;
    private RegistrySnapshotItem _displayCompareSelected;
    private bool _importButtonEnabled = true;
    private bool _importLoading;
    private bool _compareButtonEnabled;

    public bool SnapshotButtonEnabled
    {
        get => _snapshotButtonEnabled;
        set => SetProperty(ref _snapshotButtonEnabled, value);
    }

    public bool SnapshotLoading
    {
        get => _snapshotLoading;
        set => SetProperty(ref _snapshotLoading, value);
    }
    
    public ObservableCollection<RegistrySnapshotItem> DisplaySnapshots
    {
        get => _displaySnapshots;
        set => SetProperty(ref _displaySnapshots, value);
    }

    public ObservableCollection<RegistrySnapshotItem> DisplayCompare
    {
        get => _displayCompare;
        set => SetProperty(ref _displayCompare, value);
    }

    public RegistrySnapshotItem DisplaySnapshotsSelected
    {
        get => _displaySnapshotsSelected;
        set
        {
            if (SetProperty(ref _displaySnapshotsSelected, value))
            {
                SnapshotSelectionChanged();
            }
        }
    }

    public RegistrySnapshotItem DisplayCompareSelected
    {
        get => _displayCompareSelected;
        set
        {
            if (SetProperty(ref _displayCompareSelected, value))
            {
                CompareSelectionChanged();
            }
        }
    }

    public bool ImportButtonEnabled
    {
        get => _importButtonEnabled;
        set => SetProperty(ref _importButtonEnabled, value);
    }

    public bool ImportLoading
    {
        get => _importLoading;
        set => SetProperty(ref _importLoading, value);
    }

    public bool CompareButtonEnabled
    {
        get => _compareButtonEnabled;
        set => SetProperty(ref _compareButtonEnabled, value);
    }

    public RegistryHiveType HiveType
    {
        get => ConfigProvider.GetConfig(Configs.RegShotRegistryHiveType);
        set => SetProperty(Configs.RegShotRegistryHiveType, value);
    }

    public RegShotManagerViewModel()
    {
        _registryFactory = ImportExportFactory<RegistrySnapshot>.ForRegistry();
        _registryItemFactory = new RegistryItemFactory();
        DisplaySnapshots = new ObservableCollection<RegistrySnapshotItem>();
        DisplayCompare = new ObservableCollection<RegistrySnapshotItem>();
    }

    public async void TakeSnapshot()
    {
        SnapshotButtonEnabled = false;
        SnapshotLoading = true;

        var snapshot = await RegistrySnapshotManager.TakeSnapshotAsync(HiveType);
        await AddSnapshotToUI(snapshot);

        SnapshotButtonEnabled = true;
        SnapshotLoading = false;
    }

    public async void CompareSnapshot()
    {
        if (DisplaySnapshotsSelected == null || DisplayCompareSelected == null)
        {
            await new ContentDialog
            {
                XamlRoot = App.Instance.WindowsManager.MainWindow.Content.XamlRoot,
                Style = Application.Current.Resources["DefaultContentDialogStyle"] as Style,
                Title = "Error",
                CloseButtonText = "Okay",
                DefaultButton = ContentDialogButton.Primary,
                Content = $"Invalid snapshot selection."
            }.ShowAsync();
            return;
        }

        RegistrySnapshotManager.Target = new CompareTarget(DisplaySnapshotsSelected.Name, DisplayCompareSelected.Name);
        App.Instance.ToolboxNavManager.NavigateAppendPage(new NavPage("Viewer", typeof(RegShotViewer)));
    }

    public async void ImportSnapshot()
    {
        var openPicker = new FileOpenPicker { ViewMode = PickerViewMode.List };
        openPicker.FileTypeFilter.Add(".reg");

        var hwnd = WinRT.Interop.WindowNative.GetWindowHandle(App.Instance.WindowsManager.MainWindow);
        WinRT.Interop.InitializeWithWindow.Initialize(openPicker, hwnd);

        var file = await openPicker.PickSingleFileAsync();
        if (file != null)
        {
            ImportButtonEnabled = false;
            ImportLoading = true;

            var snapshot = await _registryFactory.ImportAsync(file.Path);
            RegistrySnapshotManager.AddSnapshot(snapshot);
            await AddSnapshotToUI(snapshot);

            ImportButtonEnabled = true;
            ImportLoading = false;
        }
    }

    public async void ExportSnapshot(string snapshotName)
    {
        var savePicker = new FileSavePicker();
        savePicker.FileTypeChoices.Add("Registry File", new List<string>() { ".reg" });

        savePicker.SuggestedFileName = "export";

        var hwnd = WinRT.Interop.WindowNative.GetWindowHandle(App.Instance.WindowsManager.MainWindow);
        WinRT.Interop.InitializeWithWindow.Initialize(savePicker, hwnd);

        var file = await savePicker.PickSaveFileAsync();
        if (file != null)
        {
            var notification = new ExportNotification(file);
            notification.StartExport();

            Windows.Storage.CachedFileManager.DeferUpdates(file);
            await _registryFactory.ExportAsync(file.Path, RegistrySnapshotManager.GetSnapshotByName(snapshotName));

            notification.ExportComplete();
        }
    }

    public async void DeleteSnapshot(string snapshotName)
    {
        var result = await new ContentDialog
        {
            XamlRoot = App.Instance.WindowsManager.MainWindow.Content.XamlRoot,
            Style = Application.Current.Resources["DefaultContentDialogStyle"] as Style,
            Title = "Delete Snapshot",
            PrimaryButtonText = "Delete",
            CloseButtonText = "Cancel",
            DefaultButton = ContentDialogButton.Primary,
            Content = $"Are you sure you want to delete {snapshotName}?"
        }.ShowAsync();

        if (result == ContentDialogResult.Primary)
        {
            RegistrySnapshotManager.DeleteSnapshot(snapshotName);
            DisplaySnapshots.Remove(DisplaySnapshots.First(x => x.Name == snapshotName));
            DisplayCompare.Remove(DisplayCompare.First(x => x.Name == snapshotName));
            SnapshotSelectionChanged();
        }
    }

    public void OpenView(string snapshotName)
    {
        RegistrySnapshotManager.Target = new ViewTarget(snapshotName);
        App.Instance.ToolboxNavManager.NavigateAppendPage(new NavPage("Viewer", typeof(RegShotViewer)));
    }

    private async Task AddSnapshotToUI(RegistrySnapshot snapshot)
    {
        DisplaySnapshots.Insert(0, _registryItemFactory.GetRegistrySnapshotItem(snapshot));
        DisplayCompare.Insert(0, _registryItemFactory.GetRegistrySnapshotItem(snapshot));
        await Task.Delay(50); // Some winui rendering bug if IsEnabled = false
        SnapshotSelectionChanged();
    }

    private void SnapshotSelectionChanged()
    {
        if (DisplaySnapshotsSelected == null)
        {
            // Disable all
            foreach (var registrySnapshotItem in DisplayCompare)
            {
                registrySnapshotItem.IsSelected = false;
                registrySnapshotItem.IsEnabled = false;
            }

            return;
        }

        // Disable older
        foreach (var registrySnapshotItem in DisplayCompare)
        {
            if (registrySnapshotItem.CaptureTime > DisplaySnapshotsSelected.CaptureTime && registrySnapshotItem.Type == DisplaySnapshotsSelected.Type)
            {
                registrySnapshotItem.IsEnabled = true;
            }
            else
            {
                registrySnapshotItem.IsSelected = false;
                registrySnapshotItem.IsEnabled = false;
            }
        }
    }

    private void CompareSelectionChanged()
    {
        CompareButtonEnabled = (DisplayCompareSelected != null && DisplaySnapshotsSelected != null);
    }
}
