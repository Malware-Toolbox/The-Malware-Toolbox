using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using MalwareToolbox.DesktopApp.Core.Configurations;
using MalwareToolbox.DesktopApp.Core.Registries;
using MalwareToolbox.DesktopApp.UI.Items;
using MalwareToolbox.DesktopApp.Views.Tools;
using MalwareToolbox.LibraryC.RegShot;

namespace MalwareToolbox.DesktopApp.ViewModels.Tools;

public class RegShotManagerViewModel : ToolboxViewModel
{
    private readonly RegistryItemFactory _registryItemFactory;
    
    private bool _loading;
    private ObservableCollection<RegistrySnapshotItem> _displaySnapshots;
    private ObservableCollection<RegistrySnapshotItem> _displayCompare;
    private RegistrySnapshotItem _displaySnapshotsSelected;
    private RegistrySnapshotItem _displayCompareSelected;

    public bool Loading
    {
        get => _loading;
        set => SetProperty(ref _loading, value);
    }
    
    public ObservableCollection<RegistrySnapshotItem> DisplaySnapshots
    {
        get => _displaySnapshots;
        set => SetProperty(ref _displaySnapshots, value);
    }

    public ObservableCollection<RegistrySnapshotItem> DisplayCompare
    {
        get => _displayCompare;
        set => SetProperty(ref _displayCompare, value);
    }

    public RegistrySnapshotItem DisplaySnapshotsSelected
    {
        get => _displaySnapshotsSelected;
        set
        {
            if (SetProperty(ref _displaySnapshotsSelected, value))
            {
                SnapshotSelectionChanged();
            }
        }
    }

    public RegistrySnapshotItem DisplayCompareSelected
    {
        get => _displayCompareSelected;
        set => SetProperty(ref _displayCompareSelected, value);
    }

    public RegistryHiveType HiveType
    {
        get => ConfigProvider.GetConfig(Configs.RegShotRegistryHiveType);
        set => SetProperty(Configs.RegShotRegistryHiveType, value);
    }

    public RegShotManagerViewModel()
    {
        _registryItemFactory = new RegistryItemFactory();
        DisplaySnapshots = new ObservableCollection<RegistrySnapshotItem>();
        DisplayCompare = new ObservableCollection<RegistrySnapshotItem>();
    }

    public async void TakeSnapshot()
    {
        if (Loading) return;

        Loading = true;

        var snapshot = await RegistrySnapshotManager.TakeSnapshotAsync(HiveType);
        DisplaySnapshots.Insert(0, _registryItemFactory.GetRegistrySnapshotItem(snapshot));
        DisplayCompare.Insert(0, _registryItemFactory.GetRegistrySnapshotItem(snapshot));

        Loading = false;
    }

    public void CompareSnapshot()
    {
        if (DisplaySnapshotsSelected == null || DisplayCompareSelected == null)
        {
            return;
        }

        RegistrySnapshotManager.Target = new CompareTarget(DisplaySnapshotsSelected.Name, DisplayCompareSelected.Name);
        App.Instance.MainWindow.NagivateToPage(typeof(RegShotViewer), "Viewer");
    }

    public void ImportSnapshot()
    {

    }

    public void ExportSnapshot(string snapshotName)
    {
       
    }

    public void DeleteSnapshot(string snapshotName)
    {

    }

    public void OpenView(string snapshotName)
    {
        RegistrySnapshotManager.Target = new ViewTarget(snapshotName);
        App.Instance.MainWindow.NagivateToPage(typeof(RegShotViewer), "Viewer");
    }

    private void SnapshotSelectionChanged()
    {
        if (DisplaySnapshotsSelected == null)
        {
            // Disable all
            foreach (var registrySnapshotItem in DisplayCompare)
            {
                registrySnapshotItem.IsSelected = false;
                registrySnapshotItem.IsEnabled = false;
            }

            return;
        }

        // Disable older
        foreach (var registrySnapshotItem in DisplayCompare)
        {
            if (registrySnapshotItem.CaptureTime > DisplaySnapshotsSelected.CaptureTime && registrySnapshotItem.Type == DisplaySnapshotsSelected.Type)
            {
                registrySnapshotItem.IsEnabled = true;
            }
            else
            {
                registrySnapshotItem.IsSelected = false;
                registrySnapshotItem.IsEnabled = false;
            }
        }
    }
}
