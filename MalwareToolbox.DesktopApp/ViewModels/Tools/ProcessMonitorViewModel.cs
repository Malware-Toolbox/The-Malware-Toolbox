using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using Windows.Graphics;
using CommunityToolkit.WinUI.UI;
using MalwareToolbox.DesktopApp.Core.Configurations;
using MalwareToolbox.DesktopApp.Core.Processes;
using MalwareToolbox.DesktopApp.Views.Tools;
using MalwareToolbox.LibraryC.ProcessAnalysis;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;

namespace MalwareToolbox.DesktopApp.ViewModels.Tools;

public class ProcessMonitorViewModel : ToolboxViewModel
{
    private IProcess _selectedProcess;
    private string _search = "";

    public AdvancedCollectionView ProcessList { get; }

    public RefreshInterval SelectedRefreshInterval
    {
        get => ConfigProvider.GetConfig(Configs.ProcessMonitorRefreshInterval);
        set => SetProperty(Configs.ProcessMonitorRefreshInterval, value);
    }

    public IProcess SelectedProcess
    {
        get => _selectedProcess;
        set => SetProperty(ref _selectedProcess, value);
    }

    public string Search
    {
        get => _search;
        set => SetProperty(ref _search, value);
    }

    public ProcessMonitorViewModel()
    {
        ProcessList = new AdvancedCollectionView(new ObservableCollection<IProcess>());
        //ProcessList.SortDescriptions.Add(new SortDescription("ProcessName", SortDirection.Ascending));
    }

    public async void OpenProcessWindow()
    {
        if (SelectedProcess == null) return;

        await Task.Delay(50); // Needed to prevent new window from opening behind the main window
        ProcessWindow processWindow = new ProcessWindow(SelectedProcess);
        WindowsManager.ActivateWindow(processWindow, new SizeInt32(454, 600));
    }

    public void InitProcessLoop()
    {
        ProcessManager.ProcessUpdate += UpdateProcessList;
        ProcessManager.StartProcessCapture();
        ProcessManager.ChangeRefreshInterval(SelectedRefreshInterval);
    }

    public void StopProcessLoop()
    {
        ProcessManager.ProcessUpdate -= UpdateProcessList;
    }

    public void RefreshFlyoutItem(object sender, RoutedEventArgs e)
    {
        var refreshInterval = (RefreshInterval)((RadioMenuFlyoutItem)sender).Tag;
        ProcessManager.ChangeRefreshInterval(refreshInterval);
        SelectedRefreshInterval = refreshInterval;
    }

    public void OnSearch()
    {
        try
        {
            ProcessList.Filter = item =>
            {
                if (item is not IProcess process) return false;

                if (!string.IsNullOrEmpty(process.ProcessName) && process.ProcessName.ToLower().Contains(Search.ToLower())) return true;
                if (!string.IsNullOrEmpty(process.Description) && process.Description.ToLower().Contains(Search.ToLower())) return true;

                return false;
            };
        }
        catch (ArgumentOutOfRangeException)
        {
            //bug https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/4263
        }
    }

    private void UpdateProcessList(object sender, ProcessUpdateEventArgs args)
    {
        HashSet<uint> newIds = new HashSet<uint>(args.Processes.Keys);
        List<IProcess> oldProcess = new List<IProcess>();

        foreach (var item in ProcessList)
        {
            if (item is not IProcess process) continue;
            
            if (!newIds.Contains(process.ProcessID))
            {
                oldProcess.Add(process);
            }
            else
            {
                newIds.Remove(process.ProcessID);
            }
        }

        ThreadHelper.DispatcherQueue.TryEnqueue(() =>
        {
            foreach (var process in oldProcess)
            {
                try
                {
                    ProcessList.Remove(process);
                }
                catch (ArgumentOutOfRangeException)
                {
                    //bug https://github.com/CommunityToolkit/WindowsCommunityToolkit/issues/4263
                }
            }

            foreach (var newId in newIds)
            {
                ProcessList.Add(args.Processes.GetValueOrDefault(newId));
            }

            ProcessList.Refresh();
        });
    }
}
