using System.Collections.ObjectModel;
using System.Threading.Tasks;
using CommunityToolkit.WinUI.UI.Controls.TextToolbarSymbols;
using MalwareToolbox.DesktopApp.Core.Processes;
using MalwareToolbox.LibraryC.ProcessAnalysis;

namespace MalwareToolbox.DesktopApp.ViewModels.Tools;

public class ProcessMonitorViewModel : ToolboxViewModel
{
    private readonly ProcessProvider _processProvider;

    private ObservableCollection<Process> _processList;
    private Process _selectedProcess;
    private string _filter = "";

    public ObservableCollection<Process> ProcessList
    {
        get => _processList;
        set => SetProperty(ref _processList, value);
    }

    public Process SelectedProcess
    {
        get => _selectedProcess;
        set
        {
            if (SetProperty(ref _selectedProcess, value))
            {
                ProcessSelectionChanged();
            }
        }
    }

    public string Filter
    {
        get => _filter;
        set => SetProperty(ref _filter, value);
    }

    public ProcessMonitorViewModel()
    {
        _processProvider = new ProcessProvider();
        ProcessList = new ObservableCollection<Process>();
    }

    public void InitProcessLoop()
    {
        ProcessManager.ProcessUpdate += UpdateProcessList;
        ProcessManager.StartProcessCapture();
    }

    public void StopProcessLoop()
    {
        ProcessManager.StopProcessCapture();
        ProcessManager.ProcessUpdate -= UpdateProcessList;
    }

    private void UpdateProcessList(object sender, ProcessUpdateEventArgs args)
    {
        ProcessList.Clear();
        foreach (var process in args.Processes)
        {
            if (process.ProcessName != null && process.ProcessName.ToLower().Contains(Filter.ToLower())) //TODO remove hardcode filter
            {
                ProcessList.Add(process);
            }
        }
    }

    private void ProcessSelectionChanged()
    {
        if (SelectedProcess == null) return;

        // SelectedProcess.ProcessName = "WHATTTT";

        // var threads = _processProvider.GetThreads(SelectedProcess.ProcessID);
        // if (threads != null)
        // {
        //
        // }
    }
}
