using System.Collections.Generic;
using System.Collections.ObjectModel;
using MalwareToolbox.DesktopApp.Core.Processes;
using MalwareToolbox.LibraryC.ProcessAnalysis;

namespace MalwareToolbox.DesktopApp.ViewModels.Tools;

public class ProcessMonitorViewModel : ToolboxViewModel
{
    private ObservableCollection<IProcess> _processList;
    private IProcess _selectedProcess;
    private string _search = "";

    public ObservableCollection<IProcess> ProcessList
    {
        get => _processList;
        set => SetProperty(ref _processList, value);
    }

    public IProcess SelectedProcess
    {
        get => _selectedProcess;
        set
        {
            if (SetProperty(ref _selectedProcess, value))
            {
                ProcessSelectionChanged();
            }
        }
    }

    public string Search
    {
        get => _search;
        set => SetProperty(ref _search, value);
    }

    public ProcessMonitorViewModel()
    {
        ProcessList = new ObservableCollection<IProcess>();
    }

    public void InitProcessLoop()
    {
        ProcessManager.ProcessUpdate += UpdateProcessList;
        ProcessManager.StartProcessCapture();
    }

    public void StopProcessLoop()
    {
        ProcessManager.ProcessUpdate -= UpdateProcessList;
    }

    private void UpdateProcessList(object sender, ProcessUpdateEventArgs args)
    {
        HashSet<uint> newIds = new HashSet<uint>(args.Processes.Keys);
        List<int> oldIndex = new List<int>();

        for (var i = 0; i < ProcessList.Count; i++)
        {
            if (!newIds.Contains(ProcessList[i].ProcessID) 
                || (!string.IsNullOrEmpty(Search) && !ProcessList[i].ProcessName.Contains(Search)))
            {
                oldIndex.Add(i);
            }
            else
            {
                newIds.Remove(ProcessList[i].ProcessID);
            }
        }

        ThreadHelper.DispatcherQueue.TryEnqueue(() =>
        {
            int offset = 0;
            foreach (var i in oldIndex)
            {
                ProcessList.RemoveAt(i - (offset++));
            }

            foreach (var newId in newIds)
            {
                var process = args.Processes.GetValueOrDefault(newId);
                if (string.IsNullOrEmpty(Search) || (process?.ProcessName ?? string.Empty).Contains(Search))
                {
                    ProcessList.Add(args.Processes.GetValueOrDefault(newId));
                }
            }
        });
    }

    private void ProcessSelectionChanged()
    {
        if (SelectedProcess == null) return;

        // SelectedProcess.ProcessName = "WHATTTT";

        // var threads = _processProvider.GetThreads(SelectedProcess.ProcessID);
        // if (threads != null)
        // {
        //
        // }
    }
}
