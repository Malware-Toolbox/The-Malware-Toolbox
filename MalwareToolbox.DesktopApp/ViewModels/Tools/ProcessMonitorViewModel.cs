using System.Collections.ObjectModel;
using System.Threading.Tasks;
using CommunityToolkit.WinUI.UI.Controls.TextToolbarSymbols;
using MalwareToolbox.LibraryC.ProcessAnalysis;

namespace MalwareToolbox.DesktopApp.ViewModels.Tools;

public class ProcessMonitorViewModel : ToolboxViewModel
{
    private readonly ProcessProvider _processProvider;

    private ObservableCollection<Process> _processList;
    private Process _selectedProcess;
    private string _filter = "";

    public bool DoLoop { get; set; }

    public ObservableCollection<Process> ProcessList
    {
        get => _processList;
        set => SetProperty(ref _processList, value);
    }

    public Process SelectedProcess
    {
        get => _selectedProcess;
        set
        {
            if (SetProperty(ref _selectedProcess, value))
            {
                ProcessSelectionChanged();
            }
        }
    }

    public string Filter
    {
        get => _filter;
        set => SetProperty(ref _filter, value);
    }

    public ProcessMonitorViewModel()
    {
        _processProvider = new ProcessProvider();
        ProcessList = new ObservableCollection<Process>();
    }

    public async Task ProcessLoop()
    {
        while (DoLoop)
        {
            await UpdateProcessList();
            await Task.Delay(2000);
        }
    }

    private async Task UpdateProcessList()
    {
        var processes = await Task.Run(() => _processProvider.GetProcesses());
        ProcessList.Clear();
        foreach (var process in processes)
        {
            if (process.ProcessName != null && process.ProcessName.ToLower().Contains(Filter.ToLower())) //TODO remove hardcode filter
            {
                ProcessList.Add(process);
            }
        }
    }

    private void ProcessSelectionChanged()
    {
        if (SelectedProcess == null) return;

        var threads = _processProvider.GetThreads(SelectedProcess.ProcessID);
        if (threads != null)
        {

        }
    }
}
