using System.Collections.ObjectModel;
using System.Threading.Tasks;
using CommunityToolkit.WinUI.UI.Controls.TextToolbarSymbols;
using MalwareToolbox.LibraryC.ProcessAnalysis;

namespace MalwareToolbox.DesktopApp.ViewModels.Tools;

public class ProcessMonitorViewModel : ToolboxViewModel
{
    private ObservableCollection<Process> _processList;
    private string _filter = "";

    public bool DoLoop { get; set; }

    public ObservableCollection<Process> ProcessList
    {
        get => _processList;
        set => SetProperty(ref _processList, value);
    }

    public string Filter
    {
        get => _filter;
        set => SetProperty(ref _filter, value);
    }

    public ProcessMonitorViewModel()
    {
    }

    public async Task ProcessLoop()
    {
        while (DoLoop)
        {
            await UpdateProcessList();
            await Task.Delay(500);
        }
    }

    private async Task UpdateProcessList()
    {
        var processList = new ObservableCollection<Process>();
        var processProvider = new ProcessProvider();
        var processes = await Task.Run(() => processProvider.GetProcesses());
        foreach (var process in processes)
        {
            if (process.ProcessName != null && process.ProcessName.ToLower().Contains(Filter.ToLower())) //TODO remove hardcode filter
            {
                processList.Add(process);
            }
        }

        ProcessList = processList;
    }
}
