using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.WinUI.UI.Controls.TextToolbarSymbols;
using MalwareToolbox.DesktopApp.Core.Configurations;
using MalwareToolbox.DesktopApp.UI.Items;
using MalwareToolbox.LibraryC.RegShot;

namespace MalwareToolbox.DesktopApp.ViewModels.Tools;

public class RegShotViewModel : ToolboxViewModel
{
    private readonly RegShot _regshot;
    private readonly List<RegistrySnapshot> _snapshots;
    private readonly RegistryItemFactory _registryItemFactory;

    private bool _loading;
    private ObservableCollection<RegistryKeyItem> _displayKeys;
    private ObservableCollection<RegistryValueItem> _displayValues;
    private RegistryKeyItem _selectedKey;
    private string _path;

    public bool Loading
    {
        get => _loading;
        set => SetProperty(ref _loading, value);
    }

    public ObservableCollection<RegistryKeyItem> DisplayKeys
    {
        get => _displayKeys;
        set => SetProperty(ref _displayKeys, value);
    }

    public ObservableCollection<RegistryValueItem> DisplayValues
    {
        get => _displayValues;
        set => SetProperty(ref _displayValues, value);
    }

    public RegistryKeyItem SelectedKey
    {
        get => _selectedKey;
        set
        {
            if (SetProperty(ref _selectedKey, value)) OnKeySelected();
        }
    }

    public string Path
    {
        get => _path;
        set => SetProperty(ref _path, value);
    }

    public RegistryHiveType HiveType
    {
        get => ConfigProvider.GetConfig(Configs.RegShotRegistryHiveType);
        set => SetProperty(Configs.RegShotRegistryHiveType, value);
    }

    public RegShotViewModel()
    {
        _regshot = new RegShot();
        _snapshots = new List<RegistrySnapshot>();
        _registryItemFactory = new RegistryItemFactory();
        _displayKeys = new ObservableCollection<RegistryKeyItem>();
        _displayValues = new ObservableCollection<RegistryValueItem>();
    }

    public async void TakeSnapshot()
    {
        if (Loading)
        {
            return;
        }

        Loading = true;
        
        DisplayKeys.Clear();
        DisplayValues.Clear();
        var snapshot = await Task.Run(() => _regshot.TakeSnapshot(HiveType));
        var item = await Task.Run(() => _registryItemFactory.GenerateSnapshotTree(snapshot));
        _snapshots.Insert(0, snapshot);
        DisplayKeys.Add(item);

        Loading = false;
    }

    public void OnKeySelected()
    {
        if (SelectedKey == null)
        {
            Path = "";
            return;
        }

        DisplayValues = SelectedKey.Values;
        Path = SelectedKey.Path;
    }

    public async void QuickCompare()
    {
        if (_snapshots.Count < 2)
        {
            return;
        }

        Compare(_snapshots[1], _snapshots[0]);
    }

    public async void Compare(RegistrySnapshot snapshot1, RegistrySnapshot snapshot2)
    {
        if (Loading)
        {
            return;
        }

        Loading = true;

        DisplayKeys.Clear();
        DisplayValues.Clear();
        var diffs = await Task.Run(() => _regshot.CompareSnapshots(snapshot1, snapshot2));
        var item = await Task.Run(() => _registryItemFactory.GenerateRegistryTree(diffs));
        DisplayKeys.Add(item);

        Loading = false;
    }
}
