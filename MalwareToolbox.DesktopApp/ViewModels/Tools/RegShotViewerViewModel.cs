using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using Windows.UI.Core;
using MalwareToolbox.DesktopApp.Core.Registries;
using MalwareToolbox.DesktopApp.UI.Items;
using MalwareToolbox.LibraryC.RegShot;

namespace MalwareToolbox.DesktopApp.ViewModels.Tools;

public class RegShotViewerViewModel : ToolboxViewModel
{
    private readonly RegShot _regshot; //TODO Move to RegistrySnapshotManager
    private readonly RegistryItemFactory _registryItemFactory;

    private bool _loading;
    private string _path;
    private ObservableCollection<RegistryKeyItem> _displayKeys;
    private ObservableCollection<RegistryValueItem> _displayValues;
    private RegistryKeyItem _selectedKey;

    public bool Loading
    {
        get => _loading;
        set => SetProperty(ref _loading, value);
    }

    public string Path
    {
        get => _path;
        set => SetProperty(ref _path, value);
    }

    public ObservableCollection<RegistryKeyItem> DisplayKeys
    {
        get => _displayKeys;
        set => SetProperty(ref _displayKeys, value);
    }

    public ObservableCollection<RegistryValueItem> DisplayValues
    {
        get => _displayValues;
        set => SetProperty(ref _displayValues, value);
    }

    public RegistryKeyItem SelectedKey
    {
        get => _selectedKey;
        set
        {
            if (SetProperty(ref _selectedKey, value)) OnKeySelected();
        }
    }

    public RegShotViewerViewModel()
    {
        _regshot = new RegShot();
        _registryItemFactory = new RegistryItemFactory();
        _displayKeys = new ObservableCollection<RegistryKeyItem>();
        _displayValues = new ObservableCollection<RegistryValueItem>();
    }

    public async void InitViewer()
    {
        Loading = true;

        DisplayKeys.Clear();
        DisplayValues.Clear();

        var target = RegistrySnapshotManager.Target;
        if (target is CompareTarget compareTarget)
        {
            var diffs = await RegistrySnapshotManager.CompareSnapshots(compareTarget);
            var item = await Task.Run(() => _registryItemFactory.GenerateRegistryTree(diffs));
            if (item != null) DisplayKeys.Add(item);
        }
        else
        {
            var snapshot = RegistrySnapshotManager.GetSnapshotByName(target.SnapshotName);
            var item = await Task.Run(() => _registryItemFactory.GenerateSnapshotTree(snapshot));
            if (item != null) DisplayKeys.Add(item);
        }

        Loading = false;
    }

    public void OnKeySelected()
    {
        if (SelectedKey == null)
        {
            Path = "";
            return;
        }

        DisplayValues = SelectedKey.Values;
        Path = SelectedKey.Path;
    }
}
