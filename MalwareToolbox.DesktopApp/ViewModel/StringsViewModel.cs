using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CommunityToolkit.Mvvm.ComponentModel;
using MalwareToolbox.DesktopApp.Core;
using MalwareToolbox.DesktopApp.Core.Utils;
using MalwareToolbox.LibraryC.Strings;
using Microsoft.UI.Xaml;

namespace MalwareToolbox.DesktopApp.ViewModel;

public class StringsViewModel : ObservableRecipient
{
    private readonly WinFileManager _fileManager;
    private StringAnalyser? _stringAnalyser;

    //todo save defaults
    private bool _loading;
    private ObservableCollection<GroupedList> _stringsCollection;
    private double _minLength = 10;
    private double _maxLength = 100;
    private string _search;
    private StringsDuplicateMode _duplicateMode = StringsDuplicateMode.Keep;

    public bool Loading
    {
        get => _loading;
        set => SetProperty(ref _loading, value);
    }

    public ObservableCollection<GroupedList> StringsCollection
    {
        get => _stringsCollection;
        set => SetProperty(ref _stringsCollection, value);
    }

    public double MinLength
    {
        get => _minLength;
        set => SetProperty(ref _minLength, value);
    }
    
    public double MaxLength
    {
        get => _maxLength;
        set => SetProperty(ref _maxLength, value);
    }

    public string Search
    {
        get => _search;
        set => SetProperty(ref _search, value);
    }

    public StringsDuplicateMode DuplicateMode
    {
        get => _duplicateMode;
        set => SetProperty(ref _duplicateMode, value);
    }

    public StringsViewModel()
    {
        _fileManager = (Application.Current as App)!.MainWindow.FileManager;
        _fileManager.WinFileClosed += WinFileManager_WinFileClosed;
    }

    public void InitStrings()
    {
        if (_stringAnalyser == null && _fileManager.IsFileOpened())
        {
            _stringAnalyser = new StringAnalyser(_fileManager.WinFile);
            LoadStringsAsync();
        }
        else
        {
            //TODO Dialog file not loaded
        }
    }

    public async void LoadStringsAsync()
    {
        Loading = true;
        StringsCollection = await Task.Run(() =>
        {
            var observableCollection = new ObservableCollection<GroupedList>();
            foreach (var keyValuePair in _stringAnalyser.GetStrings(new StringFilter((int)MinLength, (int)MaxLength, Search)))
            {
                observableCollection.Add(new GroupedList(keyValuePair.Value) { Key = keyValuePair.Key });
            }
            return observableCollection;
        });
        Loading = false;
    }

    private void WinFileManager_WinFileClosed(object sender, WinFileClosedEventArgs e)
    {
        _stringAnalyser = null;
        StringsCollection = null;
    }
}
