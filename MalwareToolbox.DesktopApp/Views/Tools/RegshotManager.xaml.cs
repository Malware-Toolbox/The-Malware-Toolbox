using System;
using System.Threading.Tasks;
using MalwareToolbox.DesktopApp.Core.Navigations;
using MalwareToolbox.DesktopApp.Core.NewTeachingTips;
using MalwareToolbox.DesktopApp.Core.NewTeachingTips.Triggers;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Input;
using MalwareToolbox.DesktopApp.ViewModels.Tools;
using Microsoft.UI.Xaml.Navigation;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace MalwareToolbox.DesktopApp.Views.Tools;

/// <summary>
/// An empty page that can be used on its own or navigated to within a Frame.
/// </summary>
public sealed partial class RegShotManager : Page
{
    public RegShotManagerViewModel ViewModel { get; }

    public RegShotManager()
    {
        InitializeComponent();
        ViewModel = new RegShotManagerViewModel();
        App.Instance.ToolboxNavManager.TeachingTipStart += ToolboxNavManagerOnTeachingTipStart;
    }

    private void ToolboxNavManagerOnTeachingTipStart(object sender, TeachingTipStartEventArgs e)
    {
        if (e.PageType != GetType()) return;

        Button moreButton = null;

        TeachingGuide.Create()
            .AddStep(
                SnapshotButtonTeachingTip,
                new RoutedStepTrigger(l => SnapshotButton.Click += l,
                    l => SnapshotButton.Click -= l)
            )
            .AddStep(
                SnapshotLoadTeachingTip,
                new StepTrigger(l => ViewModel.RegistrySnapshotManager.SnapshotCreated += l,
                    l => ViewModel.RegistrySnapshotManager.SnapshotCreated -= l)
            )
            .AddStep(async () =>
            {
                await Task.Delay(100); // UI Animation slow
                var listItem = SnapshotsListView.ContainerFromIndex(0) as ListViewItem;
                SnapshotItemTeachingTip.Target = listItem;
                moreButton = listItem.FindName("SnapshotMoreOption") as Button;
                SnapshotItemMoreOptionTeachingTip.Target = moreButton;
            })
            .AddStep(
                SnapshotItemTeachingTip,
                new SelectionChangedStepTrigger(l => SnapshotsListView.SelectionChanged += l,
                    l => SnapshotsListView.SelectionChanged -= l)
            )
            .AddStep(
                SnapshotItemMoreOptionTeachingTip,
                new RoutedStepTrigger(l => moreButton.Click += l,
                    l => moreButton.Click -= l)
            )
            .AddStep(
                AnotherSnapshotTeachingTip,
                new StepTrigger(l => ViewModel.RegistrySnapshotManager.SnapshotCreated += l,
                    l => ViewModel.RegistrySnapshotManager.SnapshotCreated -= l)
            )
            .AddStep(async () =>
            {
                await Task.Delay(100); // UI Animation slow
                var listItem = CompareListView.ContainerFromIndex(0) as ListViewItem;
                CompareItemTeachingTip.Target = listItem;
            })
            .AddStep(
                CompareItemTeachingTip,
                new SelectionChangedStepTrigger(l => CompareListView.SelectionChanged += l,
                    l => CompareListView.SelectionChanged -= l)
            )
            .AddStep(
                CompareButtonTeachingTip,
                new RoutedStepTrigger(l => CompareButton.Click += l,
                    l => CompareButton.Click -= l)
            )
            .StartGuide();
    }

    private void ExportFlyoutItem_OnClick(object sender, RoutedEventArgs e)
    {
        ViewModel.ExportSnapshot(((MenuFlyoutItem)sender).Tag as string);
    }

    private void DeleteFlyoutItem_OnClick(object sender, RoutedEventArgs e)
    {
        ViewModel.DeleteSnapshot(((MenuFlyoutItem)sender).Tag as string);
    }

    private void ViewFlyoutItem_OnClick(object sender, RoutedEventArgs e)
    {
        ViewModel.OpenView(((MenuFlyoutItem)sender).Tag as string);
    }

    private void SnapshotViewItem_DoubleTapped(object sender, DoubleTappedRoutedEventArgs e)
    {
        var snapshotName = ((ListViewItem)sender).Name;
        ViewModel.OpenView(snapshotName);
    }
}
