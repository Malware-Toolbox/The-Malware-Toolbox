using System;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using MalwareToolbox.DesktopApp.Core.Configurations;
using MalwareToolbox.Library.VirusTotalAPI;
using MalwareToolbox.DesktopApp.Core.Utils;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Microsoft.UI.Xaml.Controls.Primitives;
using Microsoft.UI.Xaml.Data;
using Microsoft.UI.Xaml.Input;
using Microsoft.UI.Xaml.Media;
// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace MalwareToolbox.DesktopApp.Views.Tools;

/// <summary>
/// An empty page that can be used on its own or navigated to within a Frame.
/// </summary>


public sealed partial class VirusTotal : Page
{
    private readonly IConfigProvider _configProvider;

    private ObservableCollection<GroupedList> sectionListCollection = new ObservableCollection<GroupedList>();
    private ObservableCollection<GroupedList> importsListCollection = new ObservableCollection<GroupedList>();

    public VirusTotal()
    {
         InitializeComponent();
        _configProvider = App.Instance.ConfigProvider;

        var apiKey = _configProvider.GetConfig(Configs.VirusTotalApiKey);
        if (!String.IsNullOrEmpty(apiKey))
        {
            APIText.Text = apiKey;
        }
    }
    private async void ShowDialog_Click(object sender, RoutedEventArgs e)
    {
        ContentDialog dialog = new ContentDialog();

        // XamlRoot must be set in the case of a ContentDialog running in a Desktop app
        dialog.XamlRoot = this.XamlRoot;
        dialog.Style = Application.Current.Resources["DefaultContentDialogStyle"] as Style;
        dialog.Title = "Save your API key?";
        dialog.PrimaryButtonText = "Save";
        dialog.SecondaryButtonText = "Don't Save";
        dialog.CloseButtonText = "Cancel";
        dialog.DefaultButton = ContentDialogButton.Primary;
        dialog.Content = new ContentDialog();

        var result = await dialog.ShowAsync();

        if (result == ContentDialogResult.Primary)
        {
            DialogResult.Text = "API key saved";
            _configProvider.SetConfig(Configs.VirusTotalApiKey, APIText.Text);
            OnClick();
        } 
        else if (result == ContentDialogResult.Secondary)
        {
            DialogResult.Text = "API key not saved";
            _configProvider.ResetConfig(Configs.VirusTotalApiKey);
            OnClick();
        }
        else
        {
            
        }
    }

    private async void OnClick()
    {

        var virusTotal = new VirusTotalAPI();
        var hash = HashText.Text;
        var apiKey = APIText.Text;
        Result? result = await virusTotal.GetDetailsAsync(apiKey, hash);
        //Result? result = virusTotal.GetDetails(apiKey, hash);
        if (result == null)
        {
            Console.WriteLine("Failed to get details");
            return;
        }

        // Details
        md5Text.Text = "MD5: " + result.data.attributes.md5;
        sha1Text.Text = "SHA-1: " + result.data.attributes.sha1;
        sha256Text.Text = "SHA-256: " + result.data.attributes.sha256;
        vhashText.Text = "Vhash: " + result.data.attributes.vhash;
        authentihash.Text = "Authentihash: " + result.data.attributes.authentihash;
        fileType.Text = "File Type: " + result.data.attributes.type_description;
        magic.Text = "Magic: " + result.data.attributes.magic;
        creationDateText.Text = "Creation Date: " + result.data.attributes.creation_date;
        lastModifiedText.Text = "Last Modified: " + result.data.attributes.last_modification_date;
        fileSizeText.Text = "File Size (bytes): " + result.data.attributes.size;

        // Names
        List<string> FunctionNameList = new List<string>();
        foreach (var function in result.data.attributes.names)
        {
            FunctionNameList.Add(function);
        }
        FunctionNames.ItemsSource = FunctionNameList;



        sectionListCollection.Clear();
        foreach (var section in result.data.attributes.pe_info.sections)
        {
            var SectionsList = new GroupedList(new List<string>
            {
                "Flags: " + section.flags,
                "Virtual Address: : " + section.virtual_address,
                "Virtual Size: " + section.virtual_size,
                "Raw Size: " + section.raw_size,
                "Entropy: " + section.entropy,
                "MD5: " + section.md5,
                "Chi2: " + section.chi2
            });

            SectionsList.Key = section.name;
            sectionListCollection.Add(SectionsList);
        }

        // Imports
        importsListCollection.Clear();
        var ImportsList = new GroupedList(new List<string>{});
        foreach (var imports in result.data.attributes.pe_info.import_list)
        {
            foreach (var function in imports.imported_functions)
            {
                ImportsList.Add(function);
            }

            ImportsList.Key = imports.library_name;
            importsListCollection.Add(ImportsList);
        }
    }
}
