using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using MalwareToolbox.DesktopApp.UI;
using MalwareToolbox.DesktopApp.UI.Controls;
using MalwareToolbox.DesktopApp.ViewModels.Tools;
using MalwareToolbox.LibraryC.RegShot;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Data;
using Microsoft.UI.Xaml.Media;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace MalwareToolbox.DesktopApp.Views.Tools;

/// <summary>
/// An empty page that can be used on its own or navigated to within a Frame.
/// </summary>
public sealed partial class RegShot : Page
{
    public RegShotViewModel ViewModel { get; }
    
    // private readonly LibraryC.RegShot.RegShot _regshot;
    // private RegistryHive _snapshot1;
    // private RegistryHive _snapshot2;

    public RegShot()
    {
        InitializeComponent();
        ViewModel = new RegShotViewModel();
        // _regshot = new LibraryC.RegShot.RegShot();
    }

    private async void Snapshot1_OnClick(object sender, RoutedEventArgs e)
    {
        // RegistryLoadProgressRing.IsActive = true;
        // RegistryLoadProgressRing.Visibility = Visibility.Visible;
        // RegistryTreeView.RootNodes.Clear();
        // RegistryValuesList.ItemsSource = Enumerable.Empty<object>();
        //
        // RegistryHiveType selectedHiveType = (RegistryHiveType)HiveTypeComboBox.SelectionBoxItem;
        // _snapshot1 = await Task.Run(() => _regshot.TakeSnapshot(selectedHiveType));
        // RegistryTreeViewNode node = new RegistryTreeViewNode(_snapshot1.Key);
        // RegistryTreeView.RootNodes.Add(node);
        // PopulateSubKeyTreeView(node);
        //
        // RegistryLoadProgressRing.Visibility = Visibility.Collapsed;
        // RegistryLoadProgressRing.IsActive = false;
    }

    private async void Snapshot2_OnClick(object sender, RoutedEventArgs e)
    {
        // RegistryLoadProgressRing.IsActive = true;
        // RegistryLoadProgressRing.Visibility = Visibility.Visible;
        // RegistryTreeView.RootNodes.Clear();
        // RegistryValuesList.ItemsSource = Enumerable.Empty<object>();
        //
        // RegistryHiveType selectedHiveType = (RegistryHiveType)HiveTypeComboBox.SelectionBoxItem;
        // _snapshot2 = await Task.Run(() => _regshot.TakeSnapshot(selectedHiveType));
        // RegistryTreeViewNode node = new RegistryTreeViewNode(_snapshot2.Key);
        // RegistryTreeView.RootNodes.Add(node);
        // PopulateSubKeyTreeView(node);
        //
        // RegistryLoadProgressRing.Visibility = Visibility.Collapsed;
        // RegistryLoadProgressRing.IsActive = false;
    }

    private async void Compare_OnClick(object sender, RoutedEventArgs e)
    {
        // RegistryLoadProgressRing.IsActive = true;
        // RegistryLoadProgressRing.Visibility = Visibility.Visible;
        // RegistryTreeView.RootNodes.Clear();
        // RegistryValuesList.ItemsSource = Enumerable.Empty<object>();
        //     
        // RegistryTreeView.RootNodes.Clear();
        // var diff = await Task.Run(() => _regshot.CompareSnapshots(_snapshot1, _snapshot2));
        // foreach (var keyDiff in diff)
        // {
        //     PopulateDiffTreeView(RegistryTreeView, keyDiff);
        // }
        //
        // RegistryLoadProgressRing.Visibility = Visibility.Collapsed;
        // RegistryLoadProgressRing.IsActive = false;
    }

    private void RegistryTreeView_OnExpanding(TreeView sender, TreeViewExpandingEventArgs args)
    {
        // var registryTreeViewNode = args.Node as RegistryTreeViewNode;
        // if (registryTreeViewNode != null && registryTreeViewNode.Children.Count == 0)
        // {
        //     PopulateSubKeyTreeView(registryTreeViewNode);
        // }
    }

    private void RegistryTreeView_OnItemInvoked(TreeView sender, TreeViewItemInvokedEventArgs args)
    {
        // var registryTreeViewNode = args.InvokedItem as RegistryTreeViewNode;
        // if (registryTreeViewNode != null)
        // {
        //     if (registryTreeViewNode.ValuesDiff != null)
        //     {
        //         RegistryValuesList.ItemTemplate = (DataTemplate)Resources["RegistryValueDiffListViewTemplate"];
        //         RegistryValuesList.ItemsSource = registryTreeViewNode.ValuesDiff;
        //     }
        //     else
        //     {
        //         RegistryValuesList.ItemTemplate = (DataTemplate)Resources["RegistryValueListViewTemplate"];
        //         RegistryValuesList.ItemsSource = registryTreeViewNode.RegistryKey.Values.Values;
        //     }
        //     RegistryPathTextBox.Text = registryTreeViewNode.RegistryKey.FullPath;
        // }
    }

    private void PopulateSubKeyTreeView(RegistryTreeViewNode node)
    {
        foreach (var subKey in node.RegistryKey.SubKeys.Values.OrderBy(x => x.Name))
        {
            RegistryTreeViewNode subNode = new RegistryTreeViewNode(subKey);
            node.Children.Add(subNode);
        }
    }

    private void PopulateDiffTreeView(TreeView treeView, RegistryKeyDiff keyDiff)
    {
        List<RegistryKey> keyHierarchy = new List<RegistryKey>();
        RegistryKey currentKey = keyDiff.Key;
        while (true)
        {
            currentKey = currentKey.ParentKey;
            if (currentKey == null)
            {
                break;
            }
            keyHierarchy.Insert(0, currentKey);
        }

        IList<TreeViewNode> nodes = treeView.RootNodes;
        foreach (var registryKey in keyHierarchy)
        {
            RegistryTreeViewNode node = null;
            foreach (var treeViewNode in nodes)
            {
                if (registryKey.Name.Equals(treeViewNode.Content))
                {
                    node = treeViewNode as RegistryTreeViewNode;
                    break;
                }
            }

            if (node == null)
            {
                node = new RegistryTreeViewNode(registryKey, Enumerable.Empty<RegistryValueDiff>());
                nodes.Add(node);
            }

            nodes = node.Children;
        }

        nodes.Add(new RegistryTreeViewNode(keyDiff.Key, keyDiff.ValuesDiff));
    }
}
