using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Controls.Primitives;
using Microsoft.UI.Xaml.Data;
using Microsoft.UI.Xaml.Input;
using Microsoft.UI.Xaml.Media;
using Microsoft.UI.Xaml.Navigation;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Threading.Tasks;
using Windows.Foundation;
using Windows.Foundation.Collections;
using MalwareToolbox.DesktopApp.UI;
using MalwareToolbox.LibraryC.Executables;
using MalwareToolbox.LibraryC.Unpackers;
using MalwareToolbox.LibraryC.Utils;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace MalwareToolbox.DesktopApp.Views.Tools
{
    /// <summary>
    /// An empty page that can be used on its own or navigated to within a Frame.
    /// </summary>
    public sealed partial class PEUnpacker : Page, IPageRequireFile
    {
        public PEUnpacker()
        {
            this.InitializeComponent();
        }

        protected override async void OnNavigatedTo(NavigationEventArgs e)
        {
            PackerListView.ItemsSource = null;

            var winFileManager = App.Instance.WinFileManager;
            if (winFileManager.IsFileOpened())
            {
                List<Signature> signatures = await Task.Run(() =>
                {
                    var packerDb = new PackerDatabase(@"C:\Users\wben1\Downloads\userdb.txt");
                    if (!packerDb.Load())
                    {
                        Console.WriteLine("Failed to load packer database");
                        return null;
                    }

                    var pe = new PE(winFileManager.WinFile);
                    if (!pe.LoadHeaders())
                    {
                        Console.WriteLine("Failed to load PE");
                        return null;
                    }

                    var result = packerDb.ScanPE(pe, ScanMode.EpOnly);

                    packerDb.Dispose();
                    pe.Dispose();

                    return result;
                });

                
                List<string> signatureNames = new List<string>();
                foreach (var signature in signatures)
                {
                    signatureNames.Add(signature.Tool);
                }

                PackerListView.ItemsSource = signatureNames;
            }
        }
    }
}
