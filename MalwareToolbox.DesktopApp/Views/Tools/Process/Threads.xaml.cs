using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Controls.Primitives;
using Microsoft.UI.Xaml.Data;
using Microsoft.UI.Xaml.Input;
using Microsoft.UI.Xaml.Media;
using Microsoft.UI.Xaml.Navigation;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Threading.Tasks;
using Windows.Foundation;
using Windows.Foundation.Collections;
using MalwareToolbox.LibraryC.ProcessAnalysis;
using Windows.UI.Core;
using Windows.ApplicationModel.Core;
using CommunityToolkit.WinUI;
using MalwareToolbox.DesktopApp.Core.Processes;
using MalwareToolbox.DesktopApp.UI.Items;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace MalwareToolbox.DesktopApp.Views.Tools.Process;

/// <summary>
/// An empty page that can be used on its own or navigated to within a Frame.
/// </summary>
public sealed partial class Threads : Page
{
    private readonly ProcessProvider _processProvider;

    private ObservableCollection<Thread> _threads = new();

    public Threads()
    {
        this.InitializeComponent();
        _processProvider = new ProcessProvider(() => new ObservableProcess());
    }

    protected override async void OnNavigatedTo(NavigationEventArgs e)
    {
        var processId = (uint)e.Parameter;
        var queue = Microsoft.UI.Dispatching.DispatcherQueue.GetForCurrentThread();

        while (true)
        {
            await Task.Run(async () =>
            {
                var threads = _processProvider.GetThreads(processId);

                await queue.EnqueueAsync(() => {
                    _threads.Clear();
                    foreach (var thread in threads)
                    {
                        _threads.Add(thread);
                    }
                });
            });
            await Task.Delay(1000);
        }
    }
}
