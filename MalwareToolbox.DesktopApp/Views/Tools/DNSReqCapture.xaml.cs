using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using Windows.Storage.Pickers;
using MalwareToolbox.DesktopApp.Core.Utils;
using MalwareToolbox.DesktopApp.UI.Notifications;
using MalwareToolbox.Library.DNSReqCapture;
using MalwareToolbox.Library.ImportExports;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace MalwareToolbox.DesktopApp.Views.Tools;

/// <summary>
/// An empty page that can be used on its own or navigated to within a Frame.
/// </summary>
public sealed partial class DNSReqCapture : Page
{
    private readonly ThreadHelper _threadHelper;
    private readonly ImportExportFactory<object> _factory;

    private bool _run;
    private Server server = new();

    public DNSReqCapture()
    {
        InitializeComponent();
        _threadHelper = App.Instance.ThreadHelper;
        _factory = ImportExportFactory<object>.SimpleFactory();
        server.Start();
    }
    async void OnClickStart(object sender, RoutedEventArgs ea)
    {
        StartButton.IsEnabled = false;
        StopButton.IsEnabled = true;
        if (_run) return;

        _run = true;

        var DNSip = DNSipText.Text.ToString();
        SetDNS.SettingDNS(DNSip);

        ObservableCollection<string> requestsList = new ObservableCollection<string>();
        RequestsListText.ItemsSource = requestsList;

        await Task.Run(() =>
        {
            try
            {
                while (_run)
                {
                    List<string> nameList = server.Recv();
                    _threadHelper.DispatcherQueue.TryEnqueue(() =>
                    {
                        requestsList.Insert(0, String.Join(".", nameList));
                    });
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                SetDNS.UnsetDNS();
            }
        });

        //TODO properly close server
        SetDNS.UnsetDNS();
    }
    void OnClickEnd(object sender, RoutedEventArgs ea)
    {
        StopButton.IsEnabled = false;
        StartButton.IsEnabled = true;
        _run = false;

        SetDNS.UnsetDNS();
    }

    private async void ExportButton_OnClick(object sender, RoutedEventArgs e)
    {
        var savePicker = new FileSavePicker();
        savePicker.FileTypeChoices.Add("Text File", new List<string>() { ".txt" });

        savePicker.SuggestedFileName = "export";

        var hwnd = WinRT.Interop.WindowNative.GetWindowHandle(App.Instance.WindowsManager.MainWindow);
        WinRT.Interop.InitializeWithWindow.Initialize(savePicker, hwnd);

        var file = await savePicker.PickSaveFileAsync();
        if (file != null)
        {
            var notification = new ExportNotification(file);
            notification.StartExport();

            Windows.Storage.CachedFileManager.DeferUpdates(file);
            await _factory.ExportAsync(file.Path, RequestsListText.ItemsSource);

            notification.ExportComplete();
        }
    }
}
