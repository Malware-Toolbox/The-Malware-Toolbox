using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using Windows.Storage;
using Windows.Storage.Pickers;
using MalwareToolbox.DesktopApp.Core.Processes;
using MalwareToolbox.DesktopApp.Core.Utils;
using MalwareToolbox.DesktopApp.Core.WindowFiles;
using MalwareToolbox.DesktopApp.UI;
using Microsoft.UI.Composition.SystemBackdrops;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using WinRT;
using MalwareToolbox.DesktopApp.UI.Navigations;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace MalwareToolbox.DesktopApp.Views;

/// <summary>
/// An empty window that can be used on its own or navigated to within a Frame.
/// </summary>
public sealed partial class MainWindow : Window
{
    private readonly MicaHelper _micaHelper;
    private readonly WinFileManager _fileManager;
    private readonly ProcessManager _processManager;
    private readonly NavHeaderStack _headerStack;

    public MainWindow()
    {
        InitializeComponent();

        ExtendsContentIntoTitleBar = true;
        SetTitleBar(AppTitleBar);
        
        _fileManager = App.Instance.WinFileManager;
        _fileManager.WinFileOpened += FileManager_WinFileOpened;
        _fileManager.WinFileClosed += FileManager_WinFileClosed;

        _processManager = App.Instance.ProcessManager;

        _headerStack = new NavHeaderStack();
        AppNavigationView.Header = _headerStack;

        _micaHelper = new MicaHelper(this);
        _micaHelper.TrySetMicaBackdrop();
    }

    private void AppNavigationView_OnSelectionChangedNavigationView_SelectionChanged(NavigationView sender, NavigationViewSelectionChangedEventArgs args)
    {
        NavigateToPage((NavigationViewItem)args.SelectedItem);
    }

    private async void MenuFlyoutItem_FileOpen_OnClick(object sender, RoutedEventArgs e)
    {
        await _fileManager.OpenFromFilePicker();
        //TODO error dialog
    }

    private void MenuFlyoutItem_OnClick(object sender, RoutedEventArgs e)
    {
        _fileManager.CloseFile();
    }

    private void MainWindow_OnActivated(object sender, WindowActivatedEventArgs args)
    {
        if (RecentFilesMenu.Items.Count == 0)
        {
            foreach (var recentFile in _fileManager.RecentFiles)
            {
                var menuItem = new MenuFlyoutItem() { Text = Path.GetFileName(recentFile), Tag = recentFile };
                menuItem.Click += RecentFile_OnClick;
                RecentFilesMenu.Items.Add(menuItem);
            }
            //TODO: This bug is dumb: https://github.com/microsoft/microsoft-ui-xaml/issues/1652
        }
    }

    private async void RecentFile_OnClick(object sender, RoutedEventArgs e)
    {
        var filePath = (string)((MenuFlyoutItem)sender).Tag;
        await _fileManager.OpenFile(filePath);
    }

    private void FileManager_WinFileOpened(object sender, WinFileOpenedEventArgs args)
    {
        FilePathText.Text = args.WinFile.Path;

        AppNavigationView.SelectedItem ??= FileInfoItem;
        NavigateToPage((NavigationViewItem)AppNavigationView.SelectedItem);
    }

    private void FileManager_WinFileClosed(object sender, WinFileClosedEventArgs args)
    {
        FilePathText.Text = "";
        NavigateToPage((NavigationViewItem)AppNavigationView.SelectedItem);
    }
    
    private void MainWindow_OnClosed(object sender, WindowEventArgs args)
    {
        _fileManager.CloseFile();
        _processManager.StopProcessCapture();
    }

    private bool NavigateToPage(NavigationViewItem item)
    {
        if (item == null) return false;
        _headerStack.Stack.Clear();

        var pageName = "MalwareToolbox.DesktopApp.Views." + item.Tag;
        var pageType = Type.GetType(pageName);
        if (pageType == null)
        {
            return NavigateToPage(typeof(BlankPage), item.Content as string);
        }
        if (!_fileManager.IsFileOpened() && typeof(IPageRequireFile).IsAssignableFrom(pageType))
        {
            return NavigateToPage(typeof(OpenFile), item.Content as string);
        }

        return NavigateToPage(pageType, item.Content as string);
    }

    public bool NavigateToPage(Type type, string title)
    {
        _headerStack.Stack.Add(new NavPage(title, type));
        return ContentFrame.Navigate(type);
    }

    private void BreadcrumbBar_OnItemClicked(BreadcrumbBar sender, BreadcrumbBarItemClickedEventArgs args)
    {
        var navPage = args.Item as NavPage;
        if (navPage == null) return;

        var index = _headerStack.Stack.IndexOf(navPage);
        while (_headerStack.Stack.Count > index + 1)
        {
            _headerStack.Stack.RemoveAt(_headerStack.Stack.Count - 1);
            ContentFrame.GoBack();
        }
    }
}
