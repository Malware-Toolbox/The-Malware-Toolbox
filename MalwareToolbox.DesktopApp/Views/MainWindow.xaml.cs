using System.IO;
using MalwareToolbox.DesktopApp.Core.WindowFiles;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using MalwareToolbox.DesktopApp.Core.Utils;
using System;
using MalwareToolbox.DesktopApp.Core.Navigations;
using Windows.System;
using MalwareToolbox.DesktopApp.ViewModels;
using MalwareToolbox.DesktopApp.UI;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace MalwareToolbox.DesktopApp.Views;

/// <summary>
/// An empty window that can be used on its own or navigated to within a Frame.
/// </summary>
public sealed partial class MainWindow : Window
{
    internal MainWindowViewModel ViewModel { get; }

    public MainWindow()
    {
        InitializeComponent();

        ViewModel = new MainWindowViewModel();

        ExtendsContentIntoTitleBar = true;
        SetTitleBar(AppTitleBar);
        
        new MicaHelper(this).TrySetMicaBackdrop();
    }

    private void MainWindow_OnActivated(object sender, WindowActivatedEventArgs args)
    {
        ViewModel.NavManager ??= App.Instance.ToolboxNavManager;

        if (RecentFilesMenu.Items.Count == 0)
        {
            foreach (var recentFile in ViewModel.FileManager.RecentFiles)
            {
                var menuItem = new MenuFlyoutItem() { Text = Path.GetFileName(recentFile), Tag = recentFile };
                menuItem.Click += MenuFlyoutItem_FileRecent_OnClick;
                RecentFilesMenu.Items.Add(menuItem);
            }
            //TODO: This bug is dumb: https://github.com/microsoft/microsoft-ui-xaml/issues/1652
        }
    }

    private async void MenuFlyoutItem_FileOpen_OnClick(object sender, RoutedEventArgs e)
    {
        await ViewModel.FileManager.OpenFromFilePicker();
        //TODO error dialog
    }

    private async void MenuFlyoutItem_FileRecent_OnClick(object sender, RoutedEventArgs e)
    {
        var filePath = (string)((MenuFlyoutItem)sender).Tag;
        if (!await ViewModel.FileManager.OpenFile(filePath))
        {
            await ToolboxDialogs.ErrorDialog($"Failed to open file: {filePath}").ShowAsync();
        }
    }

    private async void MenuFlyoutItem_FileClose_OnClick(object sender, RoutedEventArgs e)
    {
        if (!ViewModel.FileManager.CloseFile())
        {
            await ToolboxDialogs.ErrorDialog("Failed to close file.").ShowAsync();
        }
    }

    private void MenuFlyoutItem_TeachingTip_OnClick(object sender, RoutedEventArgs e)
    {
        ViewModel.NavManager.OnTeachingTipStart();
    }

    private async void MenuFlyoutItem_Wiki_OnClick(object sender, RoutedEventArgs e)
    {
        var meta = ViewModel.NavManager.GetSelectedPageMeta();
        if (meta != null)
        {
            await Launcher.LaunchUriAsync(new Uri(meta.WikiLink));
        }
    }

    private void MenuFlyoutItem_About_OnClick(object sender, RoutedEventArgs e)
    {
        ViewModel.NavManager.NavigateMenuItem((NavigationViewItem)AppNavigationView.SettingsItem);
    }

    private void AppNavigationView_SelectionChanged(NavigationView sender, NavigationViewSelectionChangedEventArgs args)
    {
        var meta = ViewModel.NavManager.GetPageMeta((NavigationViewItem)args.SelectedItem);
        if (meta != null)
        {
            TeachingTipItem.IsEnabled = meta.HasTeachingTip;
        }
    }

    private void BreadcrumbBar_OnItemClicked(BreadcrumbBar sender, BreadcrumbBarItemClickedEventArgs args)
    {
        if (args.Item is NavPage navPage)
        {
            ViewModel.NavManager.NavigateBackToPage(navPage);
        }
    }

    private void MainWindow_OnClosed(object sender, WindowEventArgs args)
    {
        ViewModel.FileManager.CloseFile();
        ViewModel.ProcessManager.StopProcessCapture();
        ViewModel.ConfigProvider.Save();
    }
}
