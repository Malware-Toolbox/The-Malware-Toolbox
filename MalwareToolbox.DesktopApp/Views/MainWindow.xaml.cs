using System.IO;
using MalwareToolbox.DesktopApp.Core.WindowFiles;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using MalwareToolbox.DesktopApp.UI.Navigations;
using MalwareToolbox.DesktopApp.Core.Utils;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace MalwareToolbox.DesktopApp.Views;

/// <summary>
/// An empty window that can be used on its own or navigated to within a Frame.
/// </summary>
public sealed partial class MainWindow : Window
{
    private readonly MicaHelper _micaHelper;
    private readonly WinFileManager _fileManager;

    internal ToolboxNavManager NavManager { get; private set; }

    public MainWindow()
    {
        InitializeComponent();

        ExtendsContentIntoTitleBar = true;
        SetTitleBar(AppTitleBar);
        
        _fileManager = App.Instance.WinFileManager;
        _fileManager.WinFileOpened += FileManager_WinFileOpened;
        _fileManager.WinFileClosed += FileManager_WinFileClosed;
        
        _micaHelper = new MicaHelper(this);
        _micaHelper.TrySetMicaBackdrop();
    }

    private void MainWindow_OnActivated(object sender, WindowActivatedEventArgs args)
    {
        NavManager ??= App.Instance.ToolboxNavManager;

        if (RecentFilesMenu.Items.Count == 0)
        {
            foreach (var recentFile in _fileManager.RecentFiles)
            {
                var menuItem = new MenuFlyoutItem() { Text = Path.GetFileName(recentFile), Tag = recentFile };
                menuItem.Click += MenuFlyoutItem_FileRecent_OnClick;
                RecentFilesMenu.Items.Add(menuItem);
            }
            //TODO: This bug is dumb: https://github.com/microsoft/microsoft-ui-xaml/issues/1652
        }
    }

    private async void MenuFlyoutItem_FileOpen_OnClick(object sender, RoutedEventArgs e)
    {
        await _fileManager.OpenFromFilePicker();
        //TODO error dialog
    }

    private async void MenuFlyoutItem_FileRecent_OnClick(object sender, RoutedEventArgs e)
    {
        var filePath = (string)((MenuFlyoutItem)sender).Tag;
        await _fileManager.OpenFile(filePath);
    }

    private void MenuFlyoutItem_FileClose_OnClick(object sender, RoutedEventArgs e)
    {
        _fileManager.CloseFile();
    }

    private void FileManager_WinFileOpened(object sender, WinFileOpenedEventArgs args)
    {
        FileCloseItem.IsEnabled = true;

        FilePathText.Text = args.WinFile.Path;

        AppNavigationView.SelectedItem ??= FileInfoItem;
        NavManager.NavigateMenuItem(NavManager.SelectedMenuItem);
    }

    private void FileManager_WinFileClosed(object sender, WinFileClosedEventArgs args)
    {
        FileCloseItem.IsEnabled = false;
        
        FilePathText.Text = "";
        NavManager.NavigateMenuItem(NavManager.SelectedMenuItem);
    }
    
    private void BreadcrumbBar_OnItemClicked(BreadcrumbBar sender, BreadcrumbBarItemClickedEventArgs args)
    {
        if (args.Item is NavPage navPage)
        {
            NavManager.NavigateBackToPage(navPage);
        }
    }
}
