using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using MalwareToolbox.LibraryC.RegShot;

namespace MalwareToolbox.DesktopApp.UI.Items;

public class RegistryItemFactory
{
    public RegistrySnapshotItem GetRegistrySnapshotItem(RegistrySnapshot registrySnapshot, bool enabled = true)
    {
        return new RegistrySnapshotItem(registrySnapshot.Name, registrySnapshot.CaptureTime, registrySnapshot.HiveType) { IsEnabled = enabled };
    }

    public RegistryKeyItem GenerateRegistryTree(RegistryKey registryKey)
    {
        var rootKeyItem = _GenerateRegistryTree(registryKey, DiffType.None);
        rootKeyItem.IsExpanded = true;
        return rootKeyItem;
    }

    private RegistryKeyItem _GenerateRegistryTree(RegistryKey registryKey, DiffType diffType)
    {
        var children = new ObservableCollection<RegistryKeyItem>();
        if (registryKey.SubKeys != null)
        {
            foreach (var subKey in registryKey.SubKeys.Values)
            {
                children.Add(_GenerateRegistryTree(subKey, diffType));
            }
        }

        var values = new ObservableCollection<RegistryValueItem>();
        if (registryKey.Values != null)
        {
            foreach (var value in registryKey.Values.Values)
            {
                values.Add(new RegistryValueItem(value.Name, value.Type, value.ToString(), diff: diffType));
            }
        }

        return new RegistryKeyItem(registryKey.Name, registryKey.FullPath, children, values, diff: diffType);
    }

    public RegistryKeyItem GenerateRegistryTree(List<RegistryKeyDiff> keyDiffs)
    {
        RegistryKeyItem rootKeyItem = null;

        foreach (var keyDiff in keyDiffs)
        {
            List<RegistryKey> keyHierarchy = new List<RegistryKey>();
            RegistryKey currentKey = keyDiff.Key;
            while (true)
            {
                currentKey = currentKey.ParentKey;
                if (currentKey.ParentKey == null)
                {
                    rootKeyItem ??= new RegistryKeyItem(
                        currentKey.Name,
                        currentKey.FullPath,
                        new ObservableCollection<RegistryKeyItem>(),
                        new ObservableCollection<RegistryValueItem>(),
                        isExpanded: true);

                    break;
                }

                keyHierarchy.Insert(0, currentKey);
            }

            var registryKeyItems = rootKeyItem.Children;
            foreach (var registryKey in keyHierarchy)
            {
                var registryKeyItem = registryKeyItems.FirstOrDefault(x => x.Name == registryKey.Name);
                if (registryKeyItem == null)
                {
                    registryKeyItems.Add(registryKeyItem = new RegistryKeyItem(
                        registryKey.Name,
                        registryKey.FullPath,
                        new ObservableCollection<RegistryKeyItem>(),
                        new ObservableCollection<RegistryValueItem>(),
                        isExpanded: true));
                }

                registryKeyItems = registryKeyItem.Children;
            }

            RegistryKeyItem diffKeyItem = null;
            switch (keyDiff.Type)
            {
                case DiffType.Deleted:
                    diffKeyItem = _GenerateRegistryTree(keyDiff.Key, DiffType.Deleted);
                    break;
                case DiffType.Added:
                    diffKeyItem = _GenerateRegistryTree(keyDiff.Key, DiffType.Added);
                    break;
                case DiffType.Modified:
                    diffKeyItem = new RegistryKeyItem(
                        keyDiff.Key.Name,
                        keyDiff.Key.FullPath,
                        new ObservableCollection<RegistryKeyItem>(),
                        new ObservableCollection<RegistryValueItem>(),
                        DiffType.Modified,
                        true);

                    if (keyDiff.ValuesDiff != null)
                    {
                        foreach (var valueDiff in keyDiff.ValuesDiff)
                        {
                            diffKeyItem.Values.Add(new RegistryValueItem(
                                valueDiff.Name,
                                valueDiff.Old?.Type ?? valueDiff.New?.Type ?? 0,
                                valueDiff.Old?.ToString(),
                                valueDiff.New?.ToString(),
                                valueDiff.Type));
                        }
                    }
                    break;
            }

            registryKeyItems.Add(diffKeyItem);
        }

        return rootKeyItem;
    }
}
